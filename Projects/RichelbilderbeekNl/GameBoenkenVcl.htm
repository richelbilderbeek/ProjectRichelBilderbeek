<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>GameBoenkenVcl</title>
  <meta name="description" content="C++ GameBoenkenVcl"/>
  <meta name="keywords" content="C++ GameBoenkenVcl "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="GameBoenkenVcl.htm">GameBoenkenVcl</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.1.680 at Sun Jul  6 18:32:42 2014
 -->
<p><img src="PicVcl.png" alt="VCL"/><img src="PicCppBuilder.png" alt="C++ Builder"/><img src="PicWindows.png" alt="Windows"/></p>
<p>&nbsp;</p>
<p><a href="GameBoenkenVcl.htm">BoenkenVcl)</a> is <a href="Games.htm">game</a> that is a crossing-over between soccer and billiards and can be played with twenty players. The <a href="Games.htm">game</a>'s name is Dutch, translating it to English would yield something like 'Bonking' (but if I would call the <a href="Games.htm">game</a> like that, my website would attract other people). 'Boenk' is the phonetic word of the sound two colliding Dutch snooker balls make.</p>
<p>&nbsp;</p>
<p><a href="GameBoenkenVcl.htm">BoenkenVcl</a> can be played with twenty players at the same time (on the same single keyboard). Who said that video <a href="Games.htm">games</a> could not be cosy?</p>
<p>&nbsp;</p>
<p>Since version 3.0, <a href="GameBoenkenVcl.htm">BoenkenVcl</a> was renamed <a href="GameBoenken.htm">Boenken</a> and ported to <a href="CppQtCreator.htm">Qt Creator</a> to make use of the cross-platform
<a href="CppQt.htm">Qt</a> <a href="CppLibrary.htm">library</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Downloads</h2>
<p>&nbsp;</p>
<ul>
  <li>Newer: <a href="GameBoenken.htm">Boenken</a></li>
  <li><img src="PicWindows.png" alt="Windows"/> <a href="GameBoenkenMenu_2_0.png">View a screenshot of the menu of 'Boenken' (version 2.0)(png)</a></li>
  <li><img src="PicWindows.png" alt="Windows"/> <a href="GameBoenken_2_0.png">View a screenshot of 'Boenken' (version 2.0)(png)</a></li>
  <li><img src="PicWindows.png" alt="Windows"/> <a href="GameBoenken_1_0.png">View a screenshot of 'Boenken' (version 1.0)(png)</a></li>
  <li><img src="PicWindows.png" alt="Windows"/> <a href="GameBoenkenMenu_1_0.png">View a screenshot of the menu of 'Boenken' (version 1.0)(png)</a></li>
</ul>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenkenVcl/ProjectBoenken2.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenkenVcl/ProjectBoenken2.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
USEFORM("UnitForm<a href="GameBoenken.htm">Boenken</a>2Game<a href="CppImplementationFile.htm">.cpp</a>", Form<a href="GameBoenken.htm">Boenken</a>2Game);<br/>
USEFORM("UnitForm<a href="GameBoenken.htm">Boenken</a>2Menu<a href="CppImplementationFile.htm">.cpp</a>", Form<a href="GameBoenken.htm">Boenken</a>2Menu);<br/>
USEFORM("UnitForm<a href="GameBoenken.htm">Boenken</a>2PressKey<a href="CppImplementationFile.htm">.cpp</a>", Form<a href="GameBoenken.htm">Boenken</a>2PressKey);<br/>
USEFORM("UnitForm<a href="GameBoenken.htm">Boenken</a>2<a href="CppAbout.htm">About</a><a href="CppImplementationFile.htm">.cpp</a>", Form<a href="GameBoenken.htm">Boenken</a>2<a href="CppAbout.htm">About</a>);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
WINAPI WinMain(HINSTANCE, HINSTANCE, LPSTR, <b><a href="CppInt.htm">int</a></b>)<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;<a href="CppInitialize.htm">Initialize</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Title <a href="CppOperatorAssign.htm">=</a> "<a href="GameBoenken.htm">Boenken</a> 2";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;CreateForm(__classid(TForm<a href="GameBoenken.htm">Boenken</a>2Menu), &amp;Form<a href="GameBoenken.htm">Boenken</a>2Menu);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Run();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppException.htm">Exception</a> &amp;<a href="CppException.htm">exception</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Show<a href="CppException.htm">Exception</a>(&amp;<a href="CppException.htm">exception</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (...)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppThrow.htm">throw</a></b> <a href="CppException.htm">Exception</a>("");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppCatch.htm">catch</a></b> (<a href="CppException.htm">Exception</a> &amp;<a href="CppException.htm">exception</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Show<a href="CppException.htm">Exception</a>(&amp;<a href="CppException.htm">exception</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenkenVcl/UnitEnums.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenkenVcl/UnitEnums.h" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="GameBoenken.htm">Boenken</a> 2, a simple game<br/>
&nbsp;&nbsp;Copyright (C) 2007&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitEnumsH<br/>
<a href="CppDefine.htm">#define</a> UnitEnumsH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppEnum.htm">enum</a></b> EnumGraphics { graphicsOldSchool, graphicsNewSchool };<br/>
<b><a href="CppEnum.htm">enum</a></b> EnumControls { control2keys, control4keys };<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenkenVcl/UnitEnums.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenkenVcl/UnitEnums.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="GameBoenken.htm">Boenken</a> 2, a simple game<br/>
&nbsp;&nbsp;Copyright (C) 2007&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitEnums.h"<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenkenVcl/UnitFormBoenken2About.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenkenVcl/UnitFormBoenken2About.h" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="GameBoenken.htm">Boenken</a> 2, a simple game<br/>
&nbsp;&nbsp;Copyright (C) 2007&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitForm<a href="GameBoenken.htm">Boenken</a>2<a href="CppAbout.htm">About</a>H<br/>
<a href="CppDefine.htm">#define</a> UnitForm<a href="GameBoenken.htm">Boenken</a>2<a href="CppAbout.htm">About</a>H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TForm<a href="GameBoenken.htm">Boenken</a>2<a href="CppAbout.htm">About</a> : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRichEdit *RichEdit1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelTop;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelTopLeft;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *Panel1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *Panel2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *Panel3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *Panel4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *Panel5;<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__fastcall TForm<a href="GameBoenken.htm">Boenken</a>2<a href="CppAbout.htm">About</a>(T<a href="CppComponent.htm">Component</a>* Owner);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TForm<a href="GameBoenken.htm">Boenken</a>2<a href="CppAbout.htm">About</a> *Form<a href="GameBoenken.htm">Boenken</a>2<a href="CppAbout.htm">About</a>;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenkenVcl/UnitFormBoenken2About.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenkenVcl/UnitFormBoenken2About.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="GameBoenken.htm">Boenken</a> 2, a simple game<br/>
&nbsp;&nbsp;Copyright (C) 2007&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="GameBoenken.htm">Boenken</a>2<a href="CppAbout.htm">About</a>.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TForm<a href="GameBoenken.htm">Boenken</a>2<a href="CppAbout.htm">About</a> *Form<a href="GameBoenken.htm">Boenken</a>2<a href="CppAbout.htm">About</a>;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TForm<a href="GameBoenken.htm">Boenken</a>2<a href="CppAbout.htm">About</a>::TForm<a href="GameBoenken.htm">Boenken</a>2<a href="CppAbout.htm">About</a>(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: TForm(Owner)<br/>
{<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenkenVcl/UnitFormBoenken2Game.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenkenVcl/UnitFormBoenken2Game.h" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="GameBoenken.htm">Boenken</a> 2, a simple game<br/>
&nbsp;&nbsp;Copyright (C) 2007&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitForm<a href="GameBoenken.htm">Boenken</a>2GameH<br/>
<a href="CppDefine.htm">#define</a> UnitForm<a href="GameBoenken.htm">Boenken</a>2GameH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSetH.htm">set</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitPlayer.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitEnums.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TForm<a href="GameBoenken.htm">Boenken</a>2Game : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageBackground;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageBuffer;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageRed;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageBlue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T<a href="CppTime.htm">Time</a>r *<a href="CppTime.htm">Time</a>rGame;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageBall;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageGrey;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall FormResize(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall FormKeyDown(TObject *Sender, WORD &amp;Key,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TShift<a href="CppState.htm">State</a> Shift);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall FormKeyUp(TObject *Sender, WORD &amp;Key,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TShift<a href="CppState.htm">State</a> Shift);<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> Obstacle<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> y;<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Player&gt; mPlayers;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Obstacle&gt; mObstacles;<br/>
&nbsp;&nbsp;Player mBall;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> mScoreRed;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> mScoreBlue;<br/>
&nbsp;&nbsp;<a href="CppStdSet.htm">std::set</a>&lt;WORD&gt; mKeys;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> EnumGraphics mGraphics;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> EnumControls mControls;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mFriction;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall <a href="CppTime.htm">Time</a>rGameTwoKeys(TObject *Sender);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall <a href="CppTime.htm">Time</a>rGameFourKeys(TObject *Sender);<br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TForm<a href="GameBoenken.htm">Boenken</a>2Game(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Player&gt;&amp; players,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> EnumGraphics graphics,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> EnumControls controls,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> friction);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TForm<a href="GameBoenken.htm">Boenken</a>2Game *Form<a href="GameBoenken.htm">Boenken</a>2Game;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppDrawGlobe.htm">DrawGlobe</a>(<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image,<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> rMax,<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> gMax,<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> bMax);<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> DrawCircle(<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image,<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> r,<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> g,<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> b);<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppGetAngle.htm">GetAngle</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dX, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dY);<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppDoPerfectElasticCollision.htm">DoPerfectElasticCollision</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angleCollision, <b><a href="CppDouble.htm">double</a></b>&amp; angle1, <b><a href="CppDouble.htm">double</a></b>&amp; speed1, <b><a href="CppDouble.htm">double</a></b>&amp; angle2, <b><a href="CppDouble.htm">double</a></b>&amp; speed2);<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppPaint.htm">Paint</a>Vcl(<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> red,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> green,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> blue&nbsp;&nbsp;);<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> DrawOldSchoolBackground(<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image);<br/>
<b><a href="CppVoid.htm">void</a></b> DrawNewSchoolBackground(<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image);<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenkenVcl/UnitFormBoenken2Game.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenkenVcl/UnitFormBoenken2Game.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="GameBoenken.htm">Boenken</a> 2, a simple game<br/>
&nbsp;&nbsp;Copyright (C) 2007&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="GameBoenken.htm">Boenken</a>2Game.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TForm<a href="GameBoenken.htm">Boenken</a>2Game *Form<a href="GameBoenken.htm">Boenken</a>2Game;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TForm<a href="GameBoenken.htm">Boenken</a>2Game::TForm<a href="GameBoenken.htm">Boenken</a>2Game(<br/>
&nbsp;&nbsp;T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Player&gt;&amp; players,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> EnumGraphics graphics,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> EnumControls controls,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> friction)<br/>
&nbsp;&nbsp;: TForm(Owner),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPlayers(players),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mGraphics(graphics),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mControls(controls),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mFriction(friction),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mScoreBlue(0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mScoreRed(0)<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppInitialize.htm">Initialize</a> graphics<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Pen-&gt;Width <a href="CppOperatorAssign.htm">=</a> 3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Pen-&gt;Color <a href="CppOperatorAssign.htm">=</a> clWhite;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mGraphics <a href="CppOperatorEqual.htm">==</a> graphicsOldSchool)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawCircle(ImageGrey,255,255,255);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawCircle(ImageRed ,255,0&nbsp;&nbsp;,0&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawCircle(ImageBlue,0&nbsp;&nbsp;,0&nbsp;&nbsp;,255);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawCircle(ImageBall,0&nbsp;&nbsp;,255,0&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDrawGlobe.htm">DrawGlobe</a>(ImageGrey,255,255,255);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDrawGlobe.htm">DrawGlobe</a>(ImageRed ,255,0&nbsp;&nbsp;,0&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDrawGlobe.htm">DrawGlobe</a>(ImageBlue,0&nbsp;&nbsp;,0&nbsp;&nbsp;,255);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDrawGlobe.htm">DrawGlobe</a>(ImageBall,0&nbsp;&nbsp;,255,0&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppInitialize.htm">Initialize</a> players<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nPlayers <a href="CppOperatorAssign.htm">=</a> mPlayers.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>mPlayers.resize(nPlayers);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ImageGrey-&gt;Picture-&gt;Bitmap-&gt;Width;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height <a href="CppOperatorAssign.htm">=</a> ImageGrey-&gt;Picture-&gt;Bitmap-&gt;Height;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> midX <a href="CppOperatorAssign.htm">=</a> ClientWidth&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> midY <a href="CppOperatorAssign.htm">=</a> ClientHeight <a href="CppOperatorDivide.htm">/</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a> 1.5 * <a href="CppM_PI.htm">M_PI</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angleStep <a href="CppOperatorAssign.htm">=</a> (2.0 * <a href="CppM_PI.htm">M_PI</a>) <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(nPlayers);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> ray <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(ClientWidth) <a href="CppOperatorDivide.htm">/</a> 4.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>nPlayers; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mPlayers[i].x <a href="CppOperatorAssign.htm">=</a> midX <a href="CppOperatorPlus.htm">+</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppStdSin.htm">std::sin</a>(angle) * ray) <a href="CppOperatorMinus.htm">-</a> (width <a href="CppOperatorDivide.htm">/</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mPlayers[i].y <a href="CppOperatorAssign.htm">=</a> midY <a href="CppOperatorMinus.htm">-</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppStdCos.htm">std::cos</a>(angle) * ray) <a href="CppOperatorMinus.htm">-</a> (height<a href="CppOperatorDivide.htm">/</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mPlayers[i].angle <a href="CppOperatorAssign.htm">=</a> angle <a href="CppOperatorPlus.htm">+</a> <a href="CppM_PI.htm">M_PI</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mPlayers[i].speed <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mPlayers[i].dx <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mPlayers[i].dy <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;angle<a href="CppOperatorPlusAssign.htm">+=</a>angleStep;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppInitialize.htm">Initialize</a> obstacles and ball<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nObstacles <a href="CppOperatorAssign.htm">=</a> 4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mObstacles.resize(nObstacles);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Objects are <a href="CppInitialize.htm">initialize</a>d at FormResize<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ImageGrey-&gt;Picture-&gt;Bitmap-&gt;Width;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height <a href="CppOperatorAssign.htm">=</a> ImageGrey-&gt;Picture-&gt;Bitmap-&gt;Height;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mBall.x <a href="CppOperatorAssign.htm">=</a> (ClientWidth&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> 2) <a href="CppOperatorMinus.htm">-</a> (height <a href="CppOperatorDivide.htm">/</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mBall.y <a href="CppOperatorAssign.htm">=</a> (ClientHeight <a href="CppOperatorDivide.htm">/</a> 2) <a href="CppOperatorMinus.htm">-</a> (width <a href="CppOperatorDivide.htm">/</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mBall.angle <a href="CppOperatorAssign.htm">=</a> 2.0 * <a href="CppM_PI.htm">M_PI</a> * (<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> 1000) <a href="CppOperatorDivide.htm">/</a> 1000.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mBall.speed <a href="CppOperatorAssign.htm">=</a> 0.1;<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
<br/>
&nbsp;&nbsp;FormResize(0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="GameBoenken.htm">Boenken</a>2Game::FormResize(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;ImageBackground-&gt;Picture-&gt;Bitmap-&gt;Width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ClientWidth;<br/>
&nbsp;&nbsp;ImageBackground-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorAssign.htm">=</a> ClientHeight;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mGraphics <a href="CppOperatorEqual.htm">==</a> graphicsOldSchool)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;DrawOldSchoolBackground(ImageBackground);<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;DrawNewSchoolBackground(ImageBackground);<br/>
<br/>
&nbsp;&nbsp;ImageBuffer-&gt;Picture-&gt;Bitmap-&gt;Width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ClientWidth;<br/>
&nbsp;&nbsp;ImageBuffer-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorAssign.htm">=</a> ClientHeight;<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Place the obstacles<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nObstacles <a href="CppOperatorAssign.htm">=</a> mObstacles.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ImageGrey-&gt;Picture-&gt;Bitmap-&gt;Width;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height <a href="CppOperatorAssign.htm">=</a> ImageGrey-&gt;Picture-&gt;Bitmap-&gt;Height;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mObstacles[0].x <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mObstacles[0].y <a href="CppOperatorAssign.htm">=</a> (1 * ClientHeight <a href="CppOperatorDivide.htm">/</a> 4) <a href="CppOperatorMinus.htm">-</a> (height <a href="CppOperatorDivide.htm">/</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mObstacles[1].x <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mObstacles[1].y <a href="CppOperatorAssign.htm">=</a> (3 * ClientHeight <a href="CppOperatorDivide.htm">/</a> 4) <a href="CppOperatorMinus.htm">-</a> (height <a href="CppOperatorDivide.htm">/</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mObstacles[2].x <a href="CppOperatorAssign.htm">=</a> ClientWidth <a href="CppOperatorMinus.htm">-</a> width;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mObstacles[2].y <a href="CppOperatorAssign.htm">=</a> (1 * ClientHeight <a href="CppOperatorDivide.htm">/</a> 4) <a href="CppOperatorMinus.htm">-</a> (height <a href="CppOperatorDivide.htm">/</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mObstacles[3].x <a href="CppOperatorAssign.htm">=</a> ClientWidth <a href="CppOperatorMinus.htm">-</a> width;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mObstacles[3].y <a href="CppOperatorAssign.htm">=</a> (3 * ClientHeight <a href="CppOperatorDivide.htm">/</a> 4) <a href="CppOperatorMinus.htm">-</a> (height <a href="CppOperatorDivide.htm">/</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;mObstacles[4].x <a href="CppOperatorAssign.htm">=</a> (1 * ClientWidth&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> 4) <a href="CppOperatorMinus.htm">-</a> (width&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mObstacles[4].y <a href="CppOperatorAssign.htm">=</a> (1 * ClientHeight <a href="CppOperatorDivide.htm">/</a> 2) <a href="CppOperatorMinus.htm">-</a> (height <a href="CppOperatorDivide.htm">/</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mObstacles[5].x <a href="CppOperatorAssign.htm">=</a> (3 * ClientWidth&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> 4) <a href="CppOperatorMinus.htm">-</a> (width&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mObstacles[5].y <a href="CppOperatorAssign.htm">=</a> (1 * ClientHeight <a href="CppOperatorDivide.htm">/</a> 2) <a href="CppOperatorMinus.htm">-</a> (height <a href="CppOperatorDivide.htm">/</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mControls <a href="CppOperatorEqual.htm">==</a> control2keys)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">Time</a>rGame-&gt;On<a href="CppTime.htm">Time</a>r <a href="CppOperatorAssign.htm">=</a> <a href="CppTime.htm">Time</a>rGameTwoKeys;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">Time</a>rGame-&gt;On<a href="CppTime.htm">Time</a>r <a href="CppOperatorAssign.htm">=</a> <a href="CppTime.htm">Time</a>rGameFourKeys;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTime.htm">Time</a>rGame-&gt;On<a href="CppTime.htm">Time</a>r(0);<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="GameBoenken.htm">Boenken</a>2Game::<a href="CppTime.htm">Time</a>rGameTwoKeys(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Press the keys<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Player&gt;::<a href="CppIterator.htm">iterator</a> i <a href="CppOperatorAssign.htm">=</a> mPlayers.begin();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Player&gt;::<a href="CppIterator.htm">iterator</a> j <a href="CppOperatorAssign.htm">=</a> mPlayers.end();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> acceleration <a href="CppOperatorAssign.htm">=</a> 0.2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mKeys.count( (*i).keyAccel ) <a href="CppOperatorNotEqual.htm">!=</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Accelerate<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*i).dx <a href="CppOperatorPlusAssign.htm">+=</a> (<a href="CppStdSin.htm">std::sin</a>( (*i).angle ) * acceleration);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*i).dy <a href="CppOperatorMinusAssign.htm">-=</a> (<a href="CppStdCos.htm">std::cos</a>( (*i).angle ) * acceleration);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mKeys.count( (*i).keyBrake ) <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mKeys.count( (*i).keyTurnLeft ) <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mKeys.count( (*i).keyTurnRight ) <a href="CppOperatorNotEqual.htm">!=</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Turn right<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*i).angle <a href="CppOperatorPlusAssign.htm">+=</a> 0.05 * <a href="CppM_PI.htm">M_PI</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Move players<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> maxx <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(ClientWidth&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> ImageRed-&gt;Width );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> maxy <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(ClientHeight <a href="CppOperatorMinus.htm">-</a> ImageRed-&gt;Height);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Player&gt;::<a href="CppIterator.htm">iterator</a> i <a href="CppOperatorAssign.htm">=</a> mPlayers.begin();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Player&gt;::<a href="CppIterator.htm">iterator</a> j <a href="CppOperatorAssign.htm">=</a> mPlayers.end();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*i).x <a href="CppOperatorPlusAssign.htm">+=</a> (*i).dx;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*i).y <a href="CppOperatorPlusAssign.htm">+=</a> (*i).dy;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> <b><a href="CppDo.htm">do</a></b>Again <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((*i).x &lt;&nbsp;&nbsp;0.0) { <a href="CppOperatorIncrement.htm">++</a>(*i).x; (*i).dx <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>(*i).dx; <b><a href="CppDo.htm">do</a></b>Again <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((*i).y &lt;&nbsp;&nbsp;0.0) { <a href="CppOperatorIncrement.htm">++</a>(*i).y; (*i).dy <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>(*i).dy; <b><a href="CppDo.htm">do</a></b>Again <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((*i).x &gt; maxx) { <a href="CppOperatorDecrement.htm">--</a>(*i).x; (*i).dx <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>(*i).dx; <b><a href="CppDo.htm">do</a></b>Again <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((*i).y &gt; maxy) { <a href="CppOperatorDecrement.htm">--</a>(*i).y; (*i).dy <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>(*i).dy; <b><a href="CppDo.htm">do</a></b>Again <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppDo.htm">do</a></b>Again <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>) { <a href="CppOperatorDecrement.htm">--</a>i; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> { (*i).dx<a href="CppOperatorMultiplyAssign.htm">*=</a>mFriction; (*i).dy<a href="CppOperatorMultiplyAssign.htm">*=</a>mFriction; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Move ball and check <b><a href="CppFor.htm">for</a></b> goal<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> maxx <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(ClientWidth&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> ImageRed-&gt;Width );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> maxy <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(ClientHeight <a href="CppOperatorMinus.htm">-</a> ImageRed-&gt;Height);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> <b><a href="CppDo.htm">do</a></b>Again <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> redScored <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> blueScored <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mBall.speed <a href="CppOperatorMultiplyAssign.htm">*=</a> mFriction;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b>Again <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mBall.x <a href="CppOperatorPlusAssign.htm">+=</a> (<a href="CppStdSin.htm">std::sin</a>(mBall.angle) * mBall.speed);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mBall.y <a href="CppOperatorMinusAssign.htm">-=</a> (<a href="CppStdCos.htm">std::cos</a>(mBall.angle) * mBall.speed);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mBall.x &lt;&nbsp;&nbsp;0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mBall.y &gt; 1 * ClientHeight <a href="CppOperatorDivide.htm">/</a> 4 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mBall.y &lt; 3 * ClientHeight <a href="CppOperatorDivide.htm">/</a> 4) blueScored <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mBall.x &gt; maxx <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mBall.y &gt; 1 * ClientHeight <a href="CppOperatorDivide.htm">/</a> 4 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mBall.y &lt; 3 * ClientHeight <a href="CppOperatorDivide.htm">/</a> 4) redScored&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mBall.x &lt;&nbsp;&nbsp;0.0) { <a href="CppOperatorIncrement.htm">++</a>mBall.x; mBall.angle <a href="CppOperatorAssign.htm">=</a> (0.0*<a href="CppM_PI.htm">M_PI</a>) <a href="CppOperatorPlus.htm">+</a> ((0.0*<a href="CppM_PI.htm">M_PI</a>) <a href="CppOperatorMinus.htm">-</a> mBall.angle); <b><a href="CppDo.htm">do</a></b>Again <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mBall.y &lt;&nbsp;&nbsp;0.0) { <a href="CppOperatorIncrement.htm">++</a>mBall.y; mBall.angle <a href="CppOperatorAssign.htm">=</a> (0.5*<a href="CppM_PI.htm">M_PI</a>) <a href="CppOperatorPlus.htm">+</a> ((0.5*<a href="CppM_PI.htm">M_PI</a>) <a href="CppOperatorMinus.htm">-</a> mBall.angle); <b><a href="CppDo.htm">do</a></b>Again <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mBall.x &gt; maxx) { <a href="CppOperatorDecrement.htm">--</a>mBall.x; mBall.angle <a href="CppOperatorAssign.htm">=</a> (1.0*<a href="CppM_PI.htm">M_PI</a>) <a href="CppOperatorPlus.htm">+</a> ((1.0*<a href="CppM_PI.htm">M_PI</a>) <a href="CppOperatorMinus.htm">-</a> mBall.angle); <b><a href="CppDo.htm">do</a></b>Again <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mBall.y &gt; maxy) { <a href="CppOperatorDecrement.htm">--</a>mBall.y; mBall.angle <a href="CppOperatorAssign.htm">=</a> (1.5*<a href="CppM_PI.htm">M_PI</a>) <a href="CppOperatorPlus.htm">+</a> ((1.5*<a href="CppM_PI.htm">M_PI</a>) <a href="CppOperatorMinus.htm">-</a> mBall.angle); <b><a href="CppDo.htm">do</a></b>Again <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppDo.htm">do</a></b>Again <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (redScored&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>) { <a href="CppOperatorIncrement.htm">++</a>mScoreRed ; Caption <a href="CppOperatorAssign.htm">=</a> "Red:"+<a href="CppIntToStr.htm">IntToStr</a>(mScoreRed)+" vs Blue:"+<a href="CppIntToStr.htm">IntToStr</a>(mScoreBlue); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (blueScored <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>) { <a href="CppOperatorIncrement.htm">++</a>mScoreBlue; Caption <a href="CppOperatorAssign.htm">=</a> "Red:"+<a href="CppIntToStr.htm">IntToStr</a>(mScoreRed)+" vs Blue:"+<a href="CppIntToStr.htm">IntToStr</a>(mScoreBlue); }<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check player-obstancle collisions<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> collisionDistance <a href="CppOperatorAssign.htm">=</a> ImageRed-&gt;Width;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Player&gt;::<a href="CppIterator.htm">iterator</a> player <a href="CppOperatorAssign.htm">=</a> mPlayers.begin();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Player&gt;::<a href="CppIterator.htm">iterator</a> playerEnd <a href="CppOperatorAssign.htm">=</a> mPlayers.end();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Obstacle&gt;::<a href="CppIterator.htm">iterator</a> obstacleEnd <a href="CppOperatorAssign.htm">=</a> mObstacles.end();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; player<a href="CppOperatorNotEqual.htm">!=</a>playerEnd; <a href="CppOperatorIncrement.htm">++</a>player)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Obstacle&gt;::<a href="CppIterator.htm">iterator</a> obstacle <a href="CppOperatorAssign.htm">=</a> mObstacles.begin();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; obstacle<a href="CppOperatorNotEqual.htm">!=</a>obstacleEnd; <a href="CppOperatorIncrement.htm">++</a>obstacle)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dX <a href="CppOperatorAssign.htm">=</a> (*obstacle).x <a href="CppOperatorMinus.htm">-</a> (*player).x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dY <a href="CppOperatorAssign.htm">=</a> (*obstacle).y <a href="CppOperatorMinus.htm">-</a> (*player).y;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> distance <a href="CppOperatorAssign.htm">=</a> <a href="CppStdSqrt.htm">std::sqrt</a>((dY * dY) <a href="CppOperatorPlus.htm">+</a> (dX * dX));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (distance &lt; collisionDistance)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a> <a href="CppGetAngle.htm">GetAngle</a>(dX,dY);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> playerAngle <a href="CppOperatorAssign.htm">=</a> <a href="CppGetAngle.htm">GetAngle</a>( (*player).dx, (*player).dy);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> playerSpeed <a href="CppOperatorAssign.htm">=</a> <a href="CppStdSqrt.htm">std::sqrt</a>(((*player).dy * (*player).dy) <a href="CppOperatorPlus.htm">+</a> ((*player).dx * (*player).dx));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> obstacleAngle <a href="CppOperatorAssign.htm">=</a> playerAngle <a href="CppOperatorPlus.htm">+</a> <a href="CppM_PI.htm">M_PI</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> obstacleSpeed <a href="CppOperatorAssign.htm">=</a> playerSpeed;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDoPerfectElasticCollision.htm">DoPerfectElasticCollision</a>(angle, playerAngle, playerSpeed, obstacleAngle, obstacleSpeed );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*player).dx <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;<a href="CppStdSin.htm">std::sin</a>(playerAngle) * playerSpeed;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*player).dy <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a><a href="CppStdCos.htm">std::cos</a>(playerAngle) * playerSpeed;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Let them move once<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*player).x <a href="CppOperatorPlusAssign.htm">+=</a> (*player).dx;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*player).y <a href="CppOperatorMinusAssign.htm">-=</a> (*player).dy;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check ball-obstacle collisions<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> collisionDistance <a href="CppOperatorAssign.htm">=</a> ImageRed-&gt;Width;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Obstacle&gt;::<a href="CppIterator.htm">iterator</a> obstacleEnd <a href="CppOperatorAssign.htm">=</a> mObstacles.end();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Obstacle&gt;::<a href="CppIterator.htm">iterator</a> obstacle <a href="CppOperatorAssign.htm">=</a> mObstacles.begin();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; obstacle<a href="CppOperatorNotEqual.htm">!=</a>obstacleEnd; <a href="CppOperatorIncrement.htm">++</a>obstacle)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dX <a href="CppOperatorAssign.htm">=</a> (*obstacle).x <a href="CppOperatorMinus.htm">-</a> mBall.x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dY <a href="CppOperatorAssign.htm">=</a> (*obstacle).y <a href="CppOperatorMinus.htm">-</a> mBall.y;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> distance <a href="CppOperatorAssign.htm">=</a> <a href="CppStdSqrt.htm">std::sqrt</a>((dY * dY) <a href="CppOperatorPlus.htm">+</a> (dX * dX));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (distance &lt; collisionDistance)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a> <a href="CppGetAngle.htm">GetAngle</a>(dX,dY);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> obstacleAngle <a href="CppOperatorAssign.htm">=</a> mBall.angle <a href="CppOperatorPlus.htm">+</a> <a href="CppM_PI.htm">M_PI</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> obstacleSpeed <a href="CppOperatorAssign.htm">=</a> mBall.speed;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDoPerfectElasticCollision.htm">DoPerfectElasticCollision</a>(angle, mBall.angle,mBall.speed, obstacleAngle, obstacleSpeed );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Let them move once<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mBall.x <a href="CppOperatorPlusAssign.htm">+=</a> (<a href="CppStdSin.htm">std::sin</a>(mBall.angle) * mBall.speed);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mBall.y <a href="CppOperatorMinusAssign.htm">-=</a> (<a href="CppStdCos.htm">std::cos</a>(mBall.angle) * mBall.speed);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check player-player collisions<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> collisionDistance <a href="CppOperatorAssign.htm">=</a> ImageRed-&gt;Width;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Player&gt;::<a href="CppIterator.htm">iterator</a> player1 <a href="CppOperatorAssign.htm">=</a> mPlayers.begin();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Player&gt;::<a href="CppIterator.htm">iterator</a> playerEnd <a href="CppOperatorAssign.htm">=</a> mPlayers.end();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; player1<a href="CppOperatorNotEqual.htm">!=</a>playerEnd; <a href="CppOperatorIncrement.htm">++</a>player1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Player&gt;::<a href="CppIterator.htm">iterator</a> player2 <a href="CppOperatorAssign.htm">=</a> player1 <a href="CppOperatorPlus.htm">+</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; player2<a href="CppOperatorNotEqual.htm">!=</a>playerEnd; <a href="CppOperatorIncrement.htm">++</a>player2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(player1<a href="CppOperatorNotEqual.htm">!=</a>player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dX <a href="CppOperatorAssign.htm">=</a> (*player2).x <a href="CppOperatorMinus.htm">-</a> (*player1).x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dY <a href="CppOperatorAssign.htm">=</a> (*player2).y <a href="CppOperatorMinus.htm">-</a> (*player1).y;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> distance <a href="CppOperatorAssign.htm">=</a> <a href="CppStdSqrt.htm">std::sqrt</a>((dY * dY) <a href="CppOperatorPlus.htm">+</a> (dX * dX));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (distance &lt; collisionDistance)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a> <a href="CppGetAngle.htm">GetAngle</a>(dX,dY);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> player1Angle <a href="CppOperatorAssign.htm">=</a> <a href="CppGetAngle.htm">GetAngle</a>( (*player1).dx, (*player1).dy);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> player1Speed <a href="CppOperatorAssign.htm">=</a> <a href="CppStdSqrt.htm">std::sqrt</a>(((*player1).dy * (*player1).dy) <a href="CppOperatorPlus.htm">+</a> ((*player1).dx * (*player1).dx));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> player2Angle <a href="CppOperatorAssign.htm">=</a> <a href="CppGetAngle.htm">GetAngle</a>( (*player2).dx, (*player2).dy);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> player2Speed <a href="CppOperatorAssign.htm">=</a> <a href="CppStdSqrt.htm">std::sqrt</a>(((*player2).dy * (*player2).dy) <a href="CppOperatorPlus.htm">+</a> ((*player2).dx * (*player2).dx));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDoPerfectElasticCollision.htm">DoPerfectElasticCollision</a>(angle, player1Angle,player1Speed,player2Angle,player2Speed);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*player1).dx <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;<a href="CppStdSin.htm">std::sin</a>(player1Angle) * player1Speed;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*player1).dy <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a><a href="CppStdCos.htm">std::cos</a>(player1Angle) * player1Speed;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*player2).dx <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;<a href="CppStdSin.htm">std::sin</a>(player2Angle) * player2Speed;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*player2).dy <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a><a href="CppStdCos.htm">std::cos</a>(player2Angle) * player2Speed;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Let them move once<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*player1).x <a href="CppOperatorPlusAssign.htm">+=</a> (*player1).dx;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*player1).y <a href="CppOperatorMinusAssign.htm">-=</a> (*player1).dy;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*player2).x <a href="CppOperatorPlusAssign.htm">+=</a> (*player2).dx;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*player2).y <a href="CppOperatorMinusAssign.htm">-=</a> (*player2).dy;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check player-ball collisions<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> collisionDistance <a href="CppOperatorAssign.htm">=</a> ImageRed-&gt;Width;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Player&gt;::<a href="CppIterator.htm">iterator</a> player <a href="CppOperatorAssign.htm">=</a> mPlayers.begin();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Player&gt;::<a href="CppIterator.htm">iterator</a> playerEnd <a href="CppOperatorAssign.htm">=</a> mPlayers.end();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; player<a href="CppOperatorNotEqual.htm">!=</a>playerEnd; <a href="CppOperatorIncrement.htm">++</a>player)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dX <a href="CppOperatorAssign.htm">=</a> mBall.x <a href="CppOperatorMinus.htm">-</a> (*player).x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dY <a href="CppOperatorAssign.htm">=</a> mBall.y <a href="CppOperatorMinus.htm">-</a> (*player).y;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> distance <a href="CppOperatorAssign.htm">=</a> <a href="CppStdSqrt.htm">std::sqrt</a>((dY * dY) <a href="CppOperatorPlus.htm">+</a> (dX * dX));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (distance &lt; collisionDistance)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a> <a href="CppGetAngle.htm">GetAngle</a>(dX,dY);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> playerAngle <a href="CppOperatorAssign.htm">=</a> <a href="CppGetAngle.htm">GetAngle</a>( (*player).dx, (*player).dy);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> playerSpeed <a href="CppOperatorAssign.htm">=</a> <a href="CppStdSqrt.htm">std::sqrt</a>(((*player).dy * (*player).dy) <a href="CppOperatorPlus.htm">+</a> ((*player).dx * (*player).dx));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDoPerfectElasticCollision.htm">DoPerfectElasticCollision</a>(angle, playerAngle,playerSpeed, mBall.angle, mBall.speed );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*player).dx <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;<a href="CppStdSin.htm">std::sin</a>(playerAngle) * playerSpeed;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*player).dy <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a><a href="CppStdCos.htm">std::cos</a>(playerAngle) * playerSpeed;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Let them move once<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*player).x <a href="CppOperatorPlusAssign.htm">+=</a> (*player).dx;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*player).y <a href="CppOperatorMinusAssign.htm">-=</a> (*player).dy;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mBall.x <a href="CppOperatorPlusAssign.htm">+=</a> (<a href="CppStdSin.htm">std::sin</a>(mBall.angle) * mBall.speed);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mBall.y <a href="CppOperatorMinusAssign.htm">-=</a> (<a href="CppStdCos.htm">std::cos</a>(mBall.angle) * mBall.speed);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw background on buffer<br/>
&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageBackground-&gt;Picture-&gt;Graphic);<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw obstacles on buffer<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Goal poles<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(mObstacles[0].x,mObstacles[0].y,ImageRed-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(mObstacles[1].x,mObstacles[1].y,ImageRed-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(mObstacles[2].x,mObstacles[2].y,ImageBlue-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(mObstacles[3].x,mObstacles[3].y,ImageBlue-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Others<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Obstacle&gt;::<a href="CppIterator.htm">iterator</a> i <a href="CppOperatorAssign.htm">=</a> mObstacles.begin() <a href="CppOperatorPlus.htm">+</a> 4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Obstacle&gt;::<a href="CppIterator.htm">iterator</a> j <a href="CppOperatorAssign.htm">=</a> mObstacles.end();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw((*i).x,(*i).y,ImageGrey-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw players on buffer<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Player&gt;::<a href="CppIterator.htm">iterator</a> i <a href="CppOperatorAssign.htm">=</a> mPlayers.begin();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Player&gt;::<a href="CppIterator.htm">iterator</a> j <a href="CppOperatorAssign.htm">=</a> mPlayers.end();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw((*i).x,(*i).y,ImageRed-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i<a href="CppOperatorEqual.htm">==</a>j) <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw((*i).x,(*i).y,ImageBlue-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw ball on buffer<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(mBall.x,mBall.y,ImageBall-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw player's directions on buffer<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> midX <a href="CppOperatorAssign.htm">=</a> ImageRed-&gt;Picture-&gt;Bitmap-&gt;Width <a href="CppOperatorDivide.htm">/</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> midY <a href="CppOperatorAssign.htm">=</a> ImageRed-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorDivide.htm">/</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> mid <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMin.htm">std::min</a>(midX,midY);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> ray <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(mid);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Player&gt;::<a href="CppIterator.htm">iterator</a> i <a href="CppOperatorAssign.htm">=</a> mPlayers.begin();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Player&gt;::<a href="CppIterator.htm">iterator</a> j <a href="CppOperatorAssign.htm">=</a> mPlayers.end();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x1 <a href="CppOperatorAssign.htm">=</a> mid <a href="CppOperatorPlus.htm">+</a> (*i).x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y1 <a href="CppOperatorAssign.htm">=</a> mid <a href="CppOperatorPlus.htm">+</a> (*i).y;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x2 <a href="CppOperatorAssign.htm">=</a> x1 <a href="CppOperatorPlus.htm">+</a> (<a href="CppStdSin.htm">std::sin</a>( (*i).angle) * ray);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y2 <a href="CppOperatorAssign.htm">=</a> y1 <a href="CppOperatorMinus.htm">-</a> (<a href="CppStdCos.htm">std::cos</a>( (*i).angle) * ray);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;MoveTo(x1,y1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;LineTo(x2,y2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw buffer to foreground (ImageArea)<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageBuffer-&gt;Picture-&gt;Graphic);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="GameBoenken.htm">Boenken</a>2Game::<a href="CppTime.htm">Time</a>rGameFourKeys(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Press the keys<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Player&gt;::<a href="CppIterator.htm">iterator</a> i <a href="CppOperatorAssign.htm">=</a> mPlayers.begin();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Player&gt;::<a href="CppIterator.htm">iterator</a> j <a href="CppOperatorAssign.htm">=</a> mPlayers.end();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> acceleration <a href="CppOperatorAssign.htm">=</a> 0.05;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mKeys.count( (*i).keyAccel ) <a href="CppOperatorNotEqual.htm">!=</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Accelerate<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*i).speed <a href="CppOperatorPlusAssign.htm">+=</a> acceleration;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mKeys.count( (*i).keyBrake ) <a href="CppOperatorNotEqual.htm">!=</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Brake<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*i).speed <a href="CppOperatorMinusAssign.htm">-=</a> acceleration;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mKeys.count( (*i).keyTurnLeft ) <a href="CppOperatorNotEqual.htm">!=</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Turn left<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*i).angle <a href="CppOperatorMinusAssign.htm">-=</a> 0.05 * <a href="CppM_PI.htm">M_PI</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mKeys.count( (*i).keyTurnRight ) <a href="CppOperatorNotEqual.htm">!=</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Turn<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*i).angle <a href="CppOperatorPlusAssign.htm">+=</a> 0.05 * <a href="CppM_PI.htm">M_PI</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Move players<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> maxx <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(ClientWidth&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> ImageRed-&gt;Width );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> maxy <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(ClientHeight <a href="CppOperatorMinus.htm">-</a> ImageRed-&gt;Height);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Player&gt;::<a href="CppIterator.htm">iterator</a> i <a href="CppOperatorAssign.htm">=</a> mPlayers.begin();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Player&gt;::<a href="CppIterator.htm">iterator</a> j <a href="CppOperatorAssign.htm">=</a> mPlayers.end();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*i).x <a href="CppOperatorPlusAssign.htm">+=</a> (<a href="CppStdSin.htm">std::sin</a>((*i).angle) * (*i).speed);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*i).y <a href="CppOperatorMinusAssign.htm">-=</a> (<a href="CppStdCos.htm">std::cos</a>((*i).angle) * (*i).speed);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> <b><a href="CppDo.htm">do</a></b>Again <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((*i).x &lt;&nbsp;&nbsp;0.0) { <a href="CppOperatorIncrement.htm">++</a>(*i).x; (*i).angle <a href="CppOperatorAssign.htm">=</a> (0.0*<a href="CppM_PI.htm">M_PI</a>) <a href="CppOperatorPlus.htm">+</a> ((0.0*<a href="CppM_PI.htm">M_PI</a>) <a href="CppOperatorMinus.htm">-</a> (*i).angle); <b><a href="CppDo.htm">do</a></b>Again <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((*i).y &lt;&nbsp;&nbsp;0.0) { <a href="CppOperatorIncrement.htm">++</a>(*i).y; (*i).angle <a href="CppOperatorAssign.htm">=</a> (0.5*<a href="CppM_PI.htm">M_PI</a>) <a href="CppOperatorPlus.htm">+</a> ((0.5*<a href="CppM_PI.htm">M_PI</a>) <a href="CppOperatorMinus.htm">-</a> (*i).angle); <b><a href="CppDo.htm">do</a></b>Again <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((*i).x &gt; maxx) { <a href="CppOperatorDecrement.htm">--</a>(*i).x; (*i).angle <a href="CppOperatorAssign.htm">=</a> (1.0*<a href="CppM_PI.htm">M_PI</a>) <a href="CppOperatorPlus.htm">+</a> ((1.0*<a href="CppM_PI.htm">M_PI</a>) <a href="CppOperatorMinus.htm">-</a> (*i).angle); <b><a href="CppDo.htm">do</a></b>Again <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((*i).y &gt; maxy) { <a href="CppOperatorDecrement.htm">--</a>(*i).y; (*i).angle <a href="CppOperatorAssign.htm">=</a> (1.5*<a href="CppM_PI.htm">M_PI</a>) <a href="CppOperatorPlus.htm">+</a> ((1.5*<a href="CppM_PI.htm">M_PI</a>) <a href="CppOperatorMinus.htm">-</a> (*i).angle); <b><a href="CppDo.htm">do</a></b>Again <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppDo.htm">do</a></b>Again <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>) { <a href="CppOperatorDecrement.htm">--</a>i; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> (*i).speed<a href="CppOperatorMultiplyAssign.htm">*=</a>mFriction;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Move ball and check <b><a href="CppFor.htm">for</a></b> goal<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> maxx <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(ClientWidth&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> ImageRed-&gt;Width );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> maxy <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(ClientHeight <a href="CppOperatorMinus.htm">-</a> ImageRed-&gt;Height);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> <b><a href="CppDo.htm">do</a></b>Again <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> redScored <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> blueScored <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mBall.speed<a href="CppOperatorMultiplyAssign.htm">*=</a>mFriction;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b>Again <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mBall.x <a href="CppOperatorPlusAssign.htm">+=</a> (<a href="CppStdSin.htm">std::sin</a>(mBall.angle) * mBall.speed);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mBall.y <a href="CppOperatorMinusAssign.htm">-=</a> (<a href="CppStdCos.htm">std::cos</a>(mBall.angle) * mBall.speed);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mBall.x &lt;&nbsp;&nbsp;0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mBall.y &gt; 1 * ClientHeight <a href="CppOperatorDivide.htm">/</a> 4 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mBall.y &lt; 3 * ClientHeight <a href="CppOperatorDivide.htm">/</a> 4) blueScored <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mBall.x &gt; maxx <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mBall.y &gt; 1 * ClientHeight <a href="CppOperatorDivide.htm">/</a> 4 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mBall.y &lt; 3 * ClientHeight <a href="CppOperatorDivide.htm">/</a> 4) redScored&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mBall.x &lt;&nbsp;&nbsp;0.0) { <a href="CppOperatorIncrement.htm">++</a>mBall.x; mBall.angle <a href="CppOperatorAssign.htm">=</a> (0.0*<a href="CppM_PI.htm">M_PI</a>) <a href="CppOperatorPlus.htm">+</a> ((0.0*<a href="CppM_PI.htm">M_PI</a>) <a href="CppOperatorMinus.htm">-</a> mBall.angle); <b><a href="CppDo.htm">do</a></b>Again <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mBall.y &lt;&nbsp;&nbsp;0.0) { <a href="CppOperatorIncrement.htm">++</a>mBall.y; mBall.angle <a href="CppOperatorAssign.htm">=</a> (0.5*<a href="CppM_PI.htm">M_PI</a>) <a href="CppOperatorPlus.htm">+</a> ((0.5*<a href="CppM_PI.htm">M_PI</a>) <a href="CppOperatorMinus.htm">-</a> mBall.angle); <b><a href="CppDo.htm">do</a></b>Again <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mBall.x &gt; maxx) { <a href="CppOperatorDecrement.htm">--</a>mBall.x; mBall.angle <a href="CppOperatorAssign.htm">=</a> (1.0*<a href="CppM_PI.htm">M_PI</a>) <a href="CppOperatorPlus.htm">+</a> ((1.0*<a href="CppM_PI.htm">M_PI</a>) <a href="CppOperatorMinus.htm">-</a> mBall.angle); <b><a href="CppDo.htm">do</a></b>Again <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mBall.y &gt; maxy) { <a href="CppOperatorDecrement.htm">--</a>mBall.y; mBall.angle <a href="CppOperatorAssign.htm">=</a> (1.5*<a href="CppM_PI.htm">M_PI</a>) <a href="CppOperatorPlus.htm">+</a> ((1.5*<a href="CppM_PI.htm">M_PI</a>) <a href="CppOperatorMinus.htm">-</a> mBall.angle); <b><a href="CppDo.htm">do</a></b>Again <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppDo.htm">do</a></b>Again <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (redScored&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>) { <a href="CppOperatorIncrement.htm">++</a>mScoreRed ; Caption <a href="CppOperatorAssign.htm">=</a> "Red:"+<a href="CppIntToStr.htm">IntToStr</a>(mScoreRed)+" vs Blue:"+<a href="CppIntToStr.htm">IntToStr</a>(mScoreBlue); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (blueScored <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>) { <a href="CppOperatorIncrement.htm">++</a>mScoreBlue; Caption <a href="CppOperatorAssign.htm">=</a> "Red:"+<a href="CppIntToStr.htm">IntToStr</a>(mScoreRed)+" vs Blue:"+<a href="CppIntToStr.htm">IntToStr</a>(mScoreBlue); }<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check player-obstancle collisions<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> collisionDistance <a href="CppOperatorAssign.htm">=</a> ImageRed-&gt;Width;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Player&gt;::<a href="CppIterator.htm">iterator</a> player <a href="CppOperatorAssign.htm">=</a> mPlayers.begin();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Player&gt;::<a href="CppIterator.htm">iterator</a> playerEnd <a href="CppOperatorAssign.htm">=</a> mPlayers.end();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Obstacle&gt;::<a href="CppIterator.htm">iterator</a> obstacleEnd <a href="CppOperatorAssign.htm">=</a> mObstacles.end();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; player<a href="CppOperatorNotEqual.htm">!=</a>playerEnd; <a href="CppOperatorIncrement.htm">++</a>player)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Obstacle&gt;::<a href="CppIterator.htm">iterator</a> obstacle <a href="CppOperatorAssign.htm">=</a> mObstacles.begin();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; obstacle<a href="CppOperatorNotEqual.htm">!=</a>obstacleEnd; <a href="CppOperatorIncrement.htm">++</a>obstacle)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dX <a href="CppOperatorAssign.htm">=</a> (*obstacle).x <a href="CppOperatorMinus.htm">-</a> (*player).x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dY <a href="CppOperatorAssign.htm">=</a> (*obstacle).y <a href="CppOperatorMinus.htm">-</a> (*player).y;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> distance <a href="CppOperatorAssign.htm">=</a> <a href="CppStdSqrt.htm">std::sqrt</a>((dY * dY) <a href="CppOperatorPlus.htm">+</a> (dX * dX));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (distance &lt; collisionDistance)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a> <a href="CppGetAngle.htm">GetAngle</a>(dX,dY);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> obstacleAngle <a href="CppOperatorAssign.htm">=</a> (*player).angle <a href="CppOperatorPlus.htm">+</a> <a href="CppM_PI.htm">M_PI</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> obstacleSpeed <a href="CppOperatorAssign.htm">=</a> (*player).speed;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDoPerfectElasticCollision.htm">DoPerfectElasticCollision</a>(angle, (*player).angle,(*player).speed, obstacleAngle, obstacleSpeed );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Let them move once<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*player).x <a href="CppOperatorPlusAssign.htm">+=</a> (<a href="CppStdSin.htm">std::sin</a>((*player).angle) * (*player).speed);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*player).y <a href="CppOperatorMinusAssign.htm">-=</a> (<a href="CppStdCos.htm">std::cos</a>((*player).angle) * (*player).speed);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check ball-obstacle collisions<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> collisionDistance <a href="CppOperatorAssign.htm">=</a> ImageRed-&gt;Width;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Obstacle&gt;::<a href="CppIterator.htm">iterator</a> obstacleEnd <a href="CppOperatorAssign.htm">=</a> mObstacles.end();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Obstacle&gt;::<a href="CppIterator.htm">iterator</a> obstacle <a href="CppOperatorAssign.htm">=</a> mObstacles.begin();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; obstacle<a href="CppOperatorNotEqual.htm">!=</a>obstacleEnd; <a href="CppOperatorIncrement.htm">++</a>obstacle)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dX <a href="CppOperatorAssign.htm">=</a> (*obstacle).x <a href="CppOperatorMinus.htm">-</a> mBall.x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dY <a href="CppOperatorAssign.htm">=</a> (*obstacle).y <a href="CppOperatorMinus.htm">-</a> mBall.y;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> distance <a href="CppOperatorAssign.htm">=</a> <a href="CppStdSqrt.htm">std::sqrt</a>((dY * dY) <a href="CppOperatorPlus.htm">+</a> (dX * dX));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (distance &lt; collisionDistance)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a> <a href="CppGetAngle.htm">GetAngle</a>(dX,dY);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> obstacleAngle <a href="CppOperatorAssign.htm">=</a> mBall.angle <a href="CppOperatorPlus.htm">+</a> <a href="CppM_PI.htm">M_PI</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> obstacleSpeed <a href="CppOperatorAssign.htm">=</a> mBall.speed;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDoPerfectElasticCollision.htm">DoPerfectElasticCollision</a>(angle, mBall.angle,mBall.speed, obstacleAngle, obstacleSpeed );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Let them move once<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mBall.x <a href="CppOperatorPlusAssign.htm">+=</a> (<a href="CppStdSin.htm">std::sin</a>(mBall.angle) * mBall.speed);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mBall.y <a href="CppOperatorMinusAssign.htm">-=</a> (<a href="CppStdCos.htm">std::cos</a>(mBall.angle) * mBall.speed);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check player-player collisions<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> collisionDistance <a href="CppOperatorAssign.htm">=</a> ImageRed-&gt;Width;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Player&gt;::<a href="CppIterator.htm">iterator</a> player1 <a href="CppOperatorAssign.htm">=</a> mPlayers.begin();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Player&gt;::<a href="CppIterator.htm">iterator</a> playerEnd <a href="CppOperatorAssign.htm">=</a> mPlayers.end();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; player1<a href="CppOperatorNotEqual.htm">!=</a>playerEnd; <a href="CppOperatorIncrement.htm">++</a>player1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Player&gt;::<a href="CppIterator.htm">iterator</a> player2 <a href="CppOperatorAssign.htm">=</a> player1 <a href="CppOperatorPlus.htm">+</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; player2<a href="CppOperatorNotEqual.htm">!=</a>playerEnd; <a href="CppOperatorIncrement.htm">++</a>player2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(player1<a href="CppOperatorNotEqual.htm">!=</a>player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dX <a href="CppOperatorAssign.htm">=</a> (*player2).x <a href="CppOperatorMinus.htm">-</a> (*player1).x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dY <a href="CppOperatorAssign.htm">=</a> (*player2).y <a href="CppOperatorMinus.htm">-</a> (*player1).y;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> distance <a href="CppOperatorAssign.htm">=</a> <a href="CppStdSqrt.htm">std::sqrt</a>((dY * dY) <a href="CppOperatorPlus.htm">+</a> (dX * dX));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (distance &lt; collisionDistance)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a> <a href="CppGetAngle.htm">GetAngle</a>(dX,dY);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDoPerfectElasticCollision.htm">DoPerfectElasticCollision</a>(angle, (*player1).angle,(*player1).speed,(*player2).angle,(*player2).speed);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Let them move once<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*player1).x <a href="CppOperatorPlusAssign.htm">+=</a> (<a href="CppStdSin.htm">std::sin</a>((*player1).angle) * (*player1).speed);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*player1).y <a href="CppOperatorMinusAssign.htm">-=</a> (<a href="CppStdCos.htm">std::cos</a>((*player1).angle) * (*player1).speed);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*player2).x <a href="CppOperatorPlusAssign.htm">+=</a> (<a href="CppStdSin.htm">std::sin</a>((*player2).angle) * (*player2).speed);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*player2).y <a href="CppOperatorMinusAssign.htm">-=</a> (<a href="CppStdCos.htm">std::cos</a>((*player2).angle) * (*player2).speed);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check player-ball collisions<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> collisionDistance <a href="CppOperatorAssign.htm">=</a> ImageRed-&gt;Width;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Player&gt;::<a href="CppIterator.htm">iterator</a> player <a href="CppOperatorAssign.htm">=</a> mPlayers.begin();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Player&gt;::<a href="CppIterator.htm">iterator</a> playerEnd <a href="CppOperatorAssign.htm">=</a> mPlayers.end();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; player<a href="CppOperatorNotEqual.htm">!=</a>playerEnd; <a href="CppOperatorIncrement.htm">++</a>player)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dX <a href="CppOperatorAssign.htm">=</a> mBall.x <a href="CppOperatorMinus.htm">-</a> (*player).x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dY <a href="CppOperatorAssign.htm">=</a> mBall.y <a href="CppOperatorMinus.htm">-</a> (*player).y;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> distance <a href="CppOperatorAssign.htm">=</a> <a href="CppStdSqrt.htm">std::sqrt</a>((dY * dY) <a href="CppOperatorPlus.htm">+</a> (dX * dX));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (distance &lt; collisionDistance)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a> <a href="CppGetAngle.htm">GetAngle</a>(dX,dY);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDoPerfectElasticCollision.htm">DoPerfectElasticCollision</a>(angle, (*player).angle,(*player).speed, mBall.angle, mBall.speed );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Let them move once<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*player).x <a href="CppOperatorPlusAssign.htm">+=</a> (<a href="CppStdSin.htm">std::sin</a>((*player).angle) * (*player).speed);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*player).y <a href="CppOperatorMinusAssign.htm">-=</a> (<a href="CppStdCos.htm">std::cos</a>((*player).angle) * (*player).speed);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mBall.x <a href="CppOperatorPlusAssign.htm">+=</a> (<a href="CppStdSin.htm">std::sin</a>(mBall.angle) * mBall.speed);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mBall.y <a href="CppOperatorMinusAssign.htm">-=</a> (<a href="CppStdCos.htm">std::cos</a>(mBall.angle) * mBall.speed);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw background on buffer<br/>
&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageBackground-&gt;Picture-&gt;Graphic);<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw obstacles on buffer<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Goal poles<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(mObstacles[0].x,mObstacles[0].y,ImageRed-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(mObstacles[1].x,mObstacles[1].y,ImageRed-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(mObstacles[2].x,mObstacles[2].y,ImageBlue-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(mObstacles[3].x,mObstacles[3].y,ImageBlue-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Others<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Obstacle&gt;::<a href="CppIterator.htm">iterator</a> i <a href="CppOperatorAssign.htm">=</a> mObstacles.begin() <a href="CppOperatorPlus.htm">+</a> 4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Obstacle&gt;::<a href="CppIterator.htm">iterator</a> j <a href="CppOperatorAssign.htm">=</a> mObstacles.end();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw((*i).x,(*i).y,ImageGrey-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw players on buffer<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Player&gt;::<a href="CppIterator.htm">iterator</a> i <a href="CppOperatorAssign.htm">=</a> mPlayers.begin();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Player&gt;::<a href="CppIterator.htm">iterator</a> j <a href="CppOperatorAssign.htm">=</a> mPlayers.end();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw((*i).x,(*i).y,ImageRed-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i<a href="CppOperatorEqual.htm">==</a>j) <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw((*i).x,(*i).y,ImageBlue-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw ball on buffer<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(mBall.x,mBall.y,ImageBall-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw player's directions on buffer<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> midX <a href="CppOperatorAssign.htm">=</a> ImageRed-&gt;Picture-&gt;Bitmap-&gt;Width <a href="CppOperatorDivide.htm">/</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> midY <a href="CppOperatorAssign.htm">=</a> ImageRed-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorDivide.htm">/</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> mid <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMin.htm">std::min</a>(midX,midY);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> ray <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(mid);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Player&gt;::<a href="CppIterator.htm">iterator</a> i <a href="CppOperatorAssign.htm">=</a> mPlayers.begin();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Player&gt;::<a href="CppIterator.htm">iterator</a> j <a href="CppOperatorAssign.htm">=</a> mPlayers.end();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x1 <a href="CppOperatorAssign.htm">=</a> mid <a href="CppOperatorPlus.htm">+</a> (*i).x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y1 <a href="CppOperatorAssign.htm">=</a> mid <a href="CppOperatorPlus.htm">+</a> (*i).y;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x2 <a href="CppOperatorAssign.htm">=</a> x1 <a href="CppOperatorPlus.htm">+</a> (<a href="CppStdSin.htm">std::sin</a>( (*i).angle) * ray);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y2 <a href="CppOperatorAssign.htm">=</a> y1 <a href="CppOperatorMinus.htm">-</a> (<a href="CppStdCos.htm">std::cos</a>( (*i).angle) * ray);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;MoveTo(x1,y1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;LineTo(x2,y2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw buffer to foreground (ImageArea)<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageBuffer-&gt;Picture-&gt;Graphic);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> DrawOldSchoolBackground(<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppPaint.htm">Paint</a>Vcl(image,0,0,0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> DrawNewSchoolBackground(<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Width;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height <a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Height;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>height; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * <b><a href="CppConst.htm">const</a></b> line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> *&gt;(image-&gt;Picture-&gt;Bitmap-&gt;ScanLine[y]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> fracY <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(y) <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(height);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>width; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> fracX <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(x) <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(width);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> grey <a href="CppOperatorAssign.htm">=</a> 0.5 <a href="CppOperatorPlus.htm">+</a> (0.25 * (<a href="CppStdSin.htm">std::sin</a>(fracX * <a href="CppM_PI.htm">M_PI</a> * 7.0) <a href="CppOperatorPlus.htm">+</a> <a href="CppStdSin.htm">std::sin</a>(fracY * <a href="CppM_PI.htm">M_PI</a> * 7.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> g <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(grey * 255.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( g <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( g &lt;&nbsp;&nbsp;256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*3+0] <a href="CppOperatorAssign.htm">=</a> g; <a href="CppComment.htm">//</a>Blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*3+1] <a href="CppOperatorAssign.htm">=</a> g; <a href="CppComment.htm">//</a>Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*3+2] <a href="CppOperatorAssign.htm">=</a> g; <a href="CppComment.htm">//</a>Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppPaint.htm">Paint</a>.htm<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppPaint.htm">Paint</a>Vcl(<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> red,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> green,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> blue&nbsp;&nbsp;)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap-&gt;PixelFormat <a href="CppOperatorEqual.htm">==</a> pf24bit);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxx <a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Width;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxy <a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Height;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> 0; y <a href="CppOperatorNotEqual.htm">!=</a> maxy; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * <b><a href="CppConst.htm">const</a></b> myLine<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b>*&gt;(image-&gt;Picture-&gt;Bitmap-&gt;ScanLine[y]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> 0; x <a href="CppOperatorNotEqual.htm">!=</a> maxx; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myLine[x*3+2] <a href="CppOperatorAssign.htm">=</a> red&nbsp;&nbsp;; <a href="CppComment.htm">//</a>Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myLine[x*3+1] <a href="CppOperatorAssign.htm">=</a> green; <a href="CppComment.htm">//</a>Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myLine[x*3+0] <a href="CppOperatorAssign.htm">=</a> blue ; <a href="CppComment.htm">//</a>Blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppDrawGlobe.htm">DrawGlobe</a>.htm<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppDrawGlobe.htm">DrawGlobe</a>(<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image,<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> rMax,<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> gMax,<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> bMax)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Width;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height <a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Height;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> midX <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(width ) <a href="CppOperatorDivide.htm">/</a> 2.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> midY <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(height) <a href="CppOperatorDivide.htm">/</a> 2.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> maxDist <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMin.htm">std::min</a>(midX,midY);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>height; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * <b><a href="CppConst.htm">const</a></b> line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> *&gt;(image-&gt;Picture-&gt;Bitmap-&gt;ScanLine[y]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> yD <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>width; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> xD <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dist <a href="CppOperatorAssign.htm">=</a> <a href="CppStdSqrt.htm">std::sqrt</a>( ((xD <a href="CppOperatorMinus.htm">-</a> midX) * (xD <a href="CppOperatorMinus.htm">-</a> midX)) <a href="CppOperatorPlus.htm">+</a> ((yD <a href="CppOperatorMinus.htm">-</a> midY) * (yD <a href="CppOperatorMinus.htm">-</a> midY)) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (dist <a href="CppOperatorLessEqual.htm">&lt;=</a> maxDist)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> relDist <a href="CppOperatorAssign.htm">=</a> dist <a href="CppOperatorDivide.htm">/</a> maxDist;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> r <a href="CppOperatorAssign.htm">=</a> relDist * <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(rMax);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> g <a href="CppOperatorAssign.htm">=</a> relDist * <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(gMax);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> b <a href="CppOperatorAssign.htm">=</a> relDist * <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(bMax);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( r <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( r &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( g <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( g &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( b <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( b &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*3+2] <a href="CppOperatorAssign.htm">=</a> (r <a href="CppOperatorEqual.htm">==</a> 0 ? 1 : r); <a href="CppComment.htm">//</a>Never use a zero <b><a href="CppFor.htm">for</a></b> red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*3+1] <a href="CppOperatorAssign.htm">=</a> (g <a href="CppOperatorEqual.htm">==</a> 0 ? 1 : g); <a href="CppComment.htm">//</a>Never use a zero <b><a href="CppFor.htm">for</a></b> green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*3+0] <a href="CppOperatorAssign.htm">=</a> (b <a href="CppOperatorEqual.htm">==</a> 0 ? 1 : b); <a href="CppComment.htm">//</a>Never use a zero <b><a href="CppFor.htm">for</a></b> blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*3+2] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*3+1] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*3+0] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> DrawCircle(<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image,<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> r,<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> g,<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> b)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Width;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height <a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Height;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> midX <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(width ) <a href="CppOperatorDivide.htm">/</a> 2.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> midY <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(height) <a href="CppOperatorDivide.htm">/</a> 2.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> maxDist <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMin.htm">std::min</a>(midX,midY);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> minDist <a href="CppOperatorAssign.htm">=</a> maxDist <a href="CppOperatorMinus.htm">-</a> 3.0;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>height; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * <b><a href="CppConst.htm">const</a></b> line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> *&gt;(image-&gt;Picture-&gt;Bitmap-&gt;ScanLine[y]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> yD <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>width; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> xD <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dist <a href="CppOperatorAssign.htm">=</a> <a href="CppStdSqrt.htm">std::sqrt</a>( ((xD <a href="CppOperatorMinus.htm">-</a> midX) * (xD <a href="CppOperatorMinus.htm">-</a> midX)) <a href="CppOperatorPlus.htm">+</a> ((yD <a href="CppOperatorMinus.htm">-</a> midY) * (yD <a href="CppOperatorMinus.htm">-</a> midY)) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (dist &gt; minDist <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> dist &lt; maxDist)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*3+2] <a href="CppOperatorAssign.htm">=</a> r;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*3+1] <a href="CppOperatorAssign.htm">=</a> g;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*3+0] <a href="CppOperatorAssign.htm">=</a> b;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*3+2] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*3+1] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*3+0] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From www.richelbilderbeek.nl/Cpp<a href="CppGetAngle.htm">GetAngle</a>.htm<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppGetAngle.htm">GetAngle</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dX, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dY)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>In which quadrant are we?<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (dX &gt; 0.0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (dY &gt; 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>dX &gt; 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> dY &gt; 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Quadrant IV<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dX &gt; 0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> dY &gt; 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a> (1.0 * <a href="CppM_PI.htm">M_PI</a>) <a href="CppOperatorMinus.htm">-</a> <a href="CppStdAtan.htm">std::atan</a>(dX <a href="CppOperatorDivide.htm">/</a> dY);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(angle <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.5 * <a href="CppM_PI.htm">M_PI</a> <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> angle <a href="CppOperatorLessEqual.htm">&lt;=</a> 1.0 * <a href="CppM_PI.htm">M_PI</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> angle;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (dY &lt; 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>dX &gt; 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> dY <a href="CppOperatorLessEqual.htm">&lt;=</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Quadrant I<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dX &gt; 0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> dY &lt; 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a> (0.0 * <a href="CppM_PI.htm">M_PI</a>) <a href="CppOperatorMinus.htm">-</a> <a href="CppStdAtan.htm">std::atan</a>(dX <a href="CppOperatorDivide.htm">/</a> dY);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(angle <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0 * <a href="CppM_PI.htm">M_PI</a> <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> angle <a href="CppOperatorLessEqual.htm">&lt;=</a> 0.5 * <a href="CppM_PI.htm">M_PI</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> angle;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>dX &gt; 0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> dY <a href="CppOperatorEqual.htm">==</a> 0.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>On Y-axis, right side<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dX &gt; 0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> dY <a href="CppOperatorEqual.htm">==</a> 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a> (0.5 * <a href="CppM_PI.htm">M_PI</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> angle;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (dX &lt; 0.0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (dY &gt; 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>dX &lt; 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> dY &gt; 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Quadrant III<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dX &lt; 0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> dY &gt; 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a> (1.0 * <a href="CppM_PI.htm">M_PI</a>) <a href="CppOperatorMinus.htm">-</a> <a href="CppStdAtan.htm">std::atan</a>(dX <a href="CppOperatorDivide.htm">/</a> dY);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(angle <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 1.0 * <a href="CppM_PI.htm">M_PI</a> <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> angle <a href="CppOperatorLessEqual.htm">&lt;=</a> 1.5 * <a href="CppM_PI.htm">M_PI</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> angle;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (dY &lt; 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>dX &lt; 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> dY &lt; 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Quadrant II<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dX &lt; 0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> dY &lt; 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a> (2.0 * <a href="CppM_PI.htm">M_PI</a>) <a href="CppOperatorMinus.htm">-</a> <a href="CppStdAtan.htm">std::atan</a>(dX <a href="CppOperatorDivide.htm">/</a> dY);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(angle <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 1.5 * <a href="CppM_PI.htm">M_PI</a> <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> angle <a href="CppOperatorLessEqual.htm">&lt;=</a> 2.0 * <a href="CppM_PI.htm">M_PI</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> angle;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>dX &lt; 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> dY <a href="CppOperatorEqual.htm">==</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>On X-axis<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dX &lt; 0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> dY <a href="CppOperatorEqual.htm">==</a> 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a> (1.5 * <a href="CppM_PI.htm">M_PI</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> angle;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (dY &gt; 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>dX <a href="CppOperatorEqual.htm">==</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> dY &gt; 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>On Y-axis, right side of origin<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dX<a href="CppOperatorEqual.htm">==</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> dY &gt; 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a> (1.0 * <a href="CppM_PI.htm">M_PI</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> angle;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (dY &lt; 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>dX <a href="CppOperatorEqual.htm">==</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> dY &lt; 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>On Y-axis, left side of origin<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dX<a href="CppOperatorEqual.htm">==</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> dY &lt; 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a> (0.0 * <a href="CppM_PI.htm">M_PI</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> angle;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>dX <a href="CppOperatorEqual.htm">==</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> dY <a href="CppOperatorEqual.htm">==</a> 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>On origin<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dX<a href="CppOperatorEqual.htm">==</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> dY <a href="CppOperatorEqual.htm">==</a> 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a> (0.0 * <a href="CppM_PI.htm">M_PI</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> angle;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppDoPerfectElasticCollision.htm">DoPerfectElasticCollision</a>.htm<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppDoPerfectElasticCollision.htm">DoPerfectElasticCollision</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angleCollision,<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b>&amp; angle1,<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b>&amp; speed1,<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b>&amp; angle2,<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b>&amp; speed2)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The length of the impulse of player 1 (assumes both players have equal mass!)<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> A <a href="CppOperatorAssign.htm">=</a> speed1;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The length of the impulse of player 2 (assumes both players have equal mass!)<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> E <a href="CppOperatorAssign.htm">=</a> speed2;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The angles between the two globes<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> c <a href="CppOperatorAssign.htm">=</a> angleCollision;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The angle between c and the impulse direction of player 1<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> a <a href="CppOperatorAssign.htm">=</a> c <a href="CppOperatorMinus.htm">-</a> angle1;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The angle between c and the impulse direction of player 2<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> b <a href="CppOperatorAssign.htm">=</a> c <a href="CppOperatorPlus.htm">+</a> <a href="CppM_PI.htm">M_PI</a> <a href="CppOperatorMinus.htm">-</a> angle2;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Seperate the impulses to their impulses paralel and othoganal the angle of collision<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The length of the impulse of player 1 parallel to the collision<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> B <a href="CppOperatorAssign.htm">=</a> A * <a href="CppStdCos.htm">std::cos</a>(a);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The length of the impulse of player 1 orthogonal to the collision<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> C <a href="CppOperatorAssign.htm">=</a> A * <a href="CppStdSin.htm">std::sin</a>(a);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The length of the impulse of player 2 parallel to the collision<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> F <a href="CppOperatorAssign.htm">=</a> E * <a href="CppStdCos.htm">std::cos</a>(b);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The length of the impulse of player 2 orthogonal to the collision<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> G <a href="CppOperatorAssign.htm">=</a> E * <a href="CppStdSin.htm">std::sin</a>(b);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Seperate the impulses in X and Y directions<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> BdX <a href="CppOperatorAssign.htm">=</a> B *&nbsp;&nbsp;<a href="CppStdSin.htm">std::sin</a>(c <a href="CppOperatorPlus.htm">+</a> (0.0 * <a href="CppM_PI.htm">M_PI</a>));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> BdY <a href="CppOperatorAssign.htm">=</a> B * <a href="CppOperatorMinus.htm">-</a><a href="CppStdCos.htm">std::cos</a>(c <a href="CppOperatorPlus.htm">+</a> (0.0 * <a href="CppM_PI.htm">M_PI</a>));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> CdX <a href="CppOperatorAssign.htm">=</a> C *&nbsp;&nbsp;<a href="CppStdSin.htm">std::sin</a>(c <a href="CppOperatorPlus.htm">+</a> (1.5 * <a href="CppM_PI.htm">M_PI</a>));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> CdY <a href="CppOperatorAssign.htm">=</a> C * <a href="CppOperatorMinus.htm">-</a><a href="CppStdCos.htm">std::cos</a>(c <a href="CppOperatorPlus.htm">+</a> (1.5 * <a href="CppM_PI.htm">M_PI</a>));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> FdX <a href="CppOperatorAssign.htm">=</a> F *&nbsp;&nbsp;<a href="CppStdSin.htm">std::sin</a>(c <a href="CppOperatorPlus.htm">+</a> (1.0 * <a href="CppM_PI.htm">M_PI</a>));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> FdY <a href="CppOperatorAssign.htm">=</a> F * <a href="CppOperatorMinus.htm">-</a><a href="CppStdCos.htm">std::cos</a>(c <a href="CppOperatorPlus.htm">+</a> (1.0 * <a href="CppM_PI.htm">M_PI</a>));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> GdX <a href="CppOperatorAssign.htm">=</a> G *&nbsp;&nbsp;<a href="CppStdSin.htm">std::sin</a>(c <a href="CppOperatorPlus.htm">+</a> (0.5 * <a href="CppM_PI.htm">M_PI</a>));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> GdY <a href="CppOperatorAssign.htm">=</a> G * <a href="CppOperatorMinus.htm">-</a><a href="CppStdCos.htm">std::cos</a>(c <a href="CppOperatorPlus.htm">+</a> (0.5 * <a href="CppM_PI.htm">M_PI</a>));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The resulting impulses<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The resulting impulse of player 1 in the X direction<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> DdX <a href="CppOperatorAssign.htm">=</a> CdX <a href="CppOperatorPlus.htm">+</a> FdX;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The resulting impulse of player 1 in the Y direction<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> DdY <a href="CppOperatorAssign.htm">=</a> CdY <a href="CppOperatorPlus.htm">+</a> FdY;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The resulting impulse of player 2 in the X direction<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> HdX <a href="CppOperatorAssign.htm">=</a> BdX <a href="CppOperatorPlus.htm">+</a> GdX;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The resulting impulse of player 2 in the Y direction<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> HdY <a href="CppOperatorAssign.htm">=</a> BdY <a href="CppOperatorPlus.htm">+</a> GdY;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Write the <b><a href="CppFinal.htm">final</a></b> results<br/>
&nbsp;&nbsp;angle1 <a href="CppOperatorAssign.htm">=</a> <a href="CppGetAngle.htm">GetAngle</a>(DdX, DdY);<br/>
&nbsp;&nbsp;angle2 <a href="CppOperatorAssign.htm">=</a> <a href="CppGetAngle.htm">GetAngle</a>(HdX, HdY);<br/>
&nbsp;&nbsp;speed1 <a href="CppOperatorAssign.htm">=</a> <a href="CppStdSqrt.htm">std::sqrt</a>( (DdX * DdX) <a href="CppOperatorPlus.htm">+</a> (DdY * DdY) ); <a href="CppComment.htm">//</a>Pythagoras<br/>
&nbsp;&nbsp;speed2 <a href="CppOperatorAssign.htm">=</a> <a href="CppStdSqrt.htm">std::sqrt</a>( (HdX * HdX) <a href="CppOperatorPlus.htm">+</a> (HdY * HdY) ); <a href="CppComment.htm">//</a>Pythagoras<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="GameBoenken.htm">Boenken</a>2Game::FormKeyDown(TObject *Sender, WORD &amp;Key,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TShift<a href="CppState.htm">State</a> Shift)<br/>
{<br/>
&nbsp;&nbsp;mKeys.insert(Key);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="GameBoenken.htm">Boenken</a>2Game::FormKeyUp(TObject *Sender, WORD &amp;Key,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TShift<a href="CppState.htm">State</a> Shift)<br/>
{<br/>
&nbsp;&nbsp;mKeys.erase(Key);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenkenVcl/UnitFormBoenken2Menu.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenkenVcl/UnitFormBoenken2Menu.h" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="GameBoenken.htm">Boenken</a> 2, a simple game<br/>
&nbsp;&nbsp;Copyright (C) 2007&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitForm<a href="GameBoenken.htm">Boenken</a>2MenuH<br/>
<a href="CppDefine.htm">#define</a> UnitForm<a href="GameBoenken.htm">Boenken</a>2MenuH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Grids.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ValEdit.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitEnums.h"<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TForm<a href="GameBoenken.htm">Boenken</a>2Menu : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelNunits;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageNunitsPlus;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageNunitsMinus;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TButton *ButtonStart;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TButton *ButtonCalibrate;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TButton *Button<a href="CppAbout.htm">About</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelNred;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageNredPlus;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageNredMinus;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelNblue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageNbluePlus;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageNblueMinus;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelControls;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelGraphics;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TStaticText *TextNred;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TStaticText *TextNunits;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TStaticText *TextControls;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TStaticText *TextGraphics;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TStaticText *TextNblue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageGraphicsOldSchool;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageControlsTwo;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageGraphicsNewSchool;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageControlsFour;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageGraphicsChosen;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageControlsChosen;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TStaticText *TextFriction;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelFriction;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TTrackBar *TrackBarFriction;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelFrictionValue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ButtonStartClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ButtonCalibrateClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall Button<a href="CppAbout.htm">About</a>Click(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ImageNunitsMinusClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ImageNunitsPlusClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ImageNredMinusClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ImageNredPlusClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ImageNblueMinusClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ImageNbluePlusClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ImageGraphicsOldSchoolClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ImageGraphicsNewSchoolClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ImageControlsTwoClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ImageControlsFourClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall TrackBarFrictionChange(TObject *Sender);<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdVector.htm">std::vector</a>&lt;Player&gt; mPlayers;<br/>
&nbsp;&nbsp;EnumGraphics mGraphics;<br/>
&nbsp;&nbsp;EnumControls mControls;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> mFriction;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Player&gt; mPlayerRedKeys;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Player&gt; mPlayerBlueKeys;<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__fastcall TForm<a href="GameBoenken.htm">Boenken</a>2Menu(T<a href="CppComponent.htm">Component</a>* Owner);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TForm<a href="GameBoenken.htm">Boenken</a>2Menu *Form<a href="GameBoenken.htm">Boenken</a>2Menu;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppDrawGlobe.htm">DrawGlobe</a>Minus(<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> red,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> green,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> blue);<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppDrawGlobe.htm">DrawGlobe</a>Plus(<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> red,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> green,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> blue);<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenkenVcl/UnitFormBoenken2Menu.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenkenVcl/UnitFormBoenken2Menu.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="GameBoenken.htm">Boenken</a> 2, a simple game<br/>
&nbsp;&nbsp;Copyright (C) 2007&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitPlayer.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="GameBoenken.htm">Boenken</a>2Menu.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="GameBoenken.htm">Boenken</a>2PressKey.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="GameBoenken.htm">Boenken</a>2Game.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="GameBoenken.htm">Boenken</a>2<a href="CppAbout.htm">About</a>.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TForm<a href="GameBoenken.htm">Boenken</a>2Menu *Form<a href="GameBoenken.htm">Boenken</a>2Menu;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TForm<a href="GameBoenken.htm">Boenken</a>2Menu::TForm<a href="GameBoenken.htm">Boenken</a>2Menu(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
&nbsp;&nbsp;: TForm(Owner),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mGraphics(graphicsNewSchool),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mControls(control2keys)<br/>
{<br/>
&nbsp;&nbsp;ImageNunitsMinus-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorAssign.htm">=</a> ImageNunitsMinus-&gt;Height;<br/>
&nbsp;&nbsp;ImageNunitsMinus-&gt;Picture-&gt;Bitmap-&gt;Width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ImageNunitsMinus-&gt;Width;<br/>
&nbsp;&nbsp;ImageNunitsPlus-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorAssign.htm">=</a> ImageNunitsPlus-&gt;Height;<br/>
&nbsp;&nbsp;ImageNunitsPlus-&gt;Picture-&gt;Bitmap-&gt;Width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ImageNunitsPlus-&gt;Width;<br/>
<br/>
&nbsp;&nbsp;ImageNredMinus-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorAssign.htm">=</a> ImageNredMinus-&gt;Height;<br/>
&nbsp;&nbsp;ImageNredMinus-&gt;Picture-&gt;Bitmap-&gt;Width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ImageNredMinus-&gt;Width;<br/>
&nbsp;&nbsp;ImageNredPlus-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorAssign.htm">=</a> ImageNredPlus-&gt;Height;<br/>
&nbsp;&nbsp;ImageNredPlus-&gt;Picture-&gt;Bitmap-&gt;Width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ImageNredPlus-&gt;Width;<br/>
<br/>
&nbsp;&nbsp;ImageNblueMinus-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorAssign.htm">=</a> ImageNblueMinus-&gt;Height;<br/>
&nbsp;&nbsp;ImageNblueMinus-&gt;Picture-&gt;Bitmap-&gt;Width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ImageNblueMinus-&gt;Width;<br/>
&nbsp;&nbsp;ImageNbluePlus-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorAssign.htm">=</a> ImageNbluePlus-&gt;Height;<br/>
&nbsp;&nbsp;ImageNbluePlus-&gt;Picture-&gt;Bitmap-&gt;Width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ImageNbluePlus-&gt;Width;<br/>
<br/>
&nbsp;&nbsp;ImageGraphicsOldSchool-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorAssign.htm">=</a> ImageGraphicsOldSchool-&gt;Height;<br/>
&nbsp;&nbsp;ImageGraphicsOldSchool-&gt;Picture-&gt;Bitmap-&gt;Width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ImageGraphicsOldSchool-&gt;Width;<br/>
&nbsp;&nbsp;ImageGraphicsNewSchool-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorAssign.htm">=</a> ImageGraphicsNewSchool-&gt;Height;<br/>
&nbsp;&nbsp;ImageGraphicsNewSchool-&gt;Picture-&gt;Bitmap-&gt;Width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ImageGraphicsNewSchool-&gt;Width;<br/>
&nbsp;&nbsp;ImageGraphicsChosen-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorAssign.htm">=</a> ImageGraphicsChosen-&gt;Height;<br/>
&nbsp;&nbsp;ImageGraphicsChosen-&gt;Picture-&gt;Bitmap-&gt;Width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ImageGraphicsChosen-&gt;Width;<br/>
<br/>
&nbsp;&nbsp;<a href="CppDrawGlobe.htm">DrawGlobe</a>Minus(ImageNunitsMinus,255,255,255);<br/>
&nbsp;&nbsp;<a href="CppDrawGlobe.htm">DrawGlobe</a>Plus( ImageNunitsPlus ,255,255,255);<br/>
&nbsp;&nbsp;<a href="CppDrawGlobe.htm">DrawGlobe</a>Minus(ImageNredMinus&nbsp;&nbsp;,255,&nbsp;&nbsp;0,&nbsp;&nbsp;0);<br/>
&nbsp;&nbsp;<a href="CppDrawGlobe.htm">DrawGlobe</a>Plus( ImageNredPlus&nbsp;&nbsp; ,255,&nbsp;&nbsp;0,&nbsp;&nbsp;0);<br/>
&nbsp;&nbsp;<a href="CppDrawGlobe.htm">DrawGlobe</a>Minus(ImageNblueMinus ,&nbsp;&nbsp;0,&nbsp;&nbsp;0,255);<br/>
&nbsp;&nbsp;<a href="CppDrawGlobe.htm">DrawGlobe</a>Plus( ImageNbluePlus&nbsp;&nbsp;,&nbsp;&nbsp;0,&nbsp;&nbsp;0,255);<br/>
<br/>
&nbsp;&nbsp;DrawCircle( ImageGraphicsOldSchool,&nbsp;&nbsp; 0,255,&nbsp;&nbsp;0);<br/>
&nbsp;&nbsp;<a href="CppDrawGlobe.htm">DrawGlobe</a> ( ImageGraphicsNewSchool,&nbsp;&nbsp; 0,255,&nbsp;&nbsp;0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Default: New School graphics<br/>
&nbsp;&nbsp;ImageGraphicsChosen-&gt;Picture-&gt;Graphic <a href="CppOperatorAssign.htm">=</a> ImageGraphicsNewSchool-&gt;Picture-&gt;Graphic;<br/>
<br/>
&nbsp;&nbsp;TrackBarFriction-&gt;OnChange(0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>ImageNunits-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Font-&gt;Size <a href="CppOperatorAssign.htm">=</a> ImageNunits-&gt;Picture-&gt;Graphic-&gt;Height;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>ImageNunits-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;TextOutA(0,0,"+");<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="GameBoenken.htm">Boenken</a>2Menu::ButtonStartClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Distribute the players over the units<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nUnits <a href="CppOperatorAssign.htm">=</a> PanelNunits-&gt;Caption.<a href="CppToInt.htm">ToInt</a>();<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Player&gt; players(nUnits);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Player&gt;::<a href="CppIterator.htm">iterator</a> playerEnd <a href="CppOperatorAssign.htm">=</a> players.end();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Player&gt;::<a href="CppIterator.htm">iterator</a> redEnd <a href="CppOperatorAssign.htm">=</a> mPlayerRedKeys.end();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Player&gt;::<a href="CppIterator.htm">iterator</a> blueEnd <a href="CppOperatorAssign.htm">=</a> mPlayerBlueKeys.end();<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Player&gt;::<a href="CppIterator.htm">iterator</a> red <a href="CppOperatorAssign.htm">=</a> mPlayerRedKeys.begin();<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Player&gt;::<a href="CppIterator.htm">iterator</a> blue <a href="CppOperatorAssign.htm">=</a> mPlayerBlueKeys.begin();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Player&gt;::<a href="CppIterator.htm">iterator</a> player <a href="CppOperatorAssign.htm">=</a> players.begin();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;player<a href="CppOperatorNotEqual.htm">!=</a>playerEnd;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>player)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (red <a href="CppOperatorEqual.htm">==</a> redEnd) red <a href="CppOperatorAssign.htm">=</a> mPlayerRedKeys.begin();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(*player).keyAccel&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> (*red).keyAccel;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(*player).keyBrake&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> (*red).keyBrake;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(*player).keyTurnLeft&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (*red).keyTurnLeft;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(*player).keyTurnRight <a href="CppOperatorAssign.htm">=</a> (*red).keyTurnRight;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>red;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>player;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (player<a href="CppOperatorEqual.htm">==</a>playerEnd) <b><a href="CppBreak.htm">break</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (blue <a href="CppOperatorEqual.htm">==</a> blueEnd) blue <a href="CppOperatorAssign.htm">=</a> mPlayerBlueKeys.begin();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(*player).keyAccel&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> (*blue).keyAccel;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(*player).keyBrake&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> (*blue).keyBrake;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(*player).keyTurnLeft&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (*blue).keyTurnLeft;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(*player).keyTurnRight <a href="CppOperatorAssign.htm">=</a> (*blue).keyTurnRight;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>blue;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;TForm<a href="GameBoenken.htm">Boenken</a>2Game&gt; f(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> TForm<a href="GameBoenken.htm">Boenken</a>2Game(0,players,mGraphics,mControls,mFriction));<br/>
&nbsp;&nbsp;f-&gt;ShowModal();<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="GameBoenken.htm">Boenken</a>2Menu::ButtonCalibrateClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nUnits <a href="CppOperatorAssign.htm">=</a> PanelNunits-&gt;Caption.<a href="CppToInt.htm">ToInt</a>();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nRed&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> PanelNred-&gt;Caption.<a href="CppToInt.htm">ToInt</a>();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nBlue&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> PanelNblue-&gt;Caption.<a href="CppToInt.htm">ToInt</a>();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(nUnits <a href="CppOperatorGreaterEqual.htm">&gt;=</a> nRed <a href="CppOperatorPlus.htm">+</a> nBlue);<br/>
<br/>
&nbsp;&nbsp;mPlayerRedKeys.resize(nRed);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>nRed; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> String message <a href="CppOperatorAssign.htm">=</a> "Red player #" <a href="CppOperatorPlus.htm">+</a> <a href="CppIntToStr.htm">IntToStr</a>(i+1) <a href="CppOperatorPlus.htm">+</a> ", please press key <b><a href="CppFor.htm">for</a></b> 'Accelerate'.";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;TForm<a href="GameBoenken.htm">Boenken</a>2PressKey&gt; f(<b><a href="CppNew.htm">new</a></b> TForm<a href="GameBoenken.htm">Boenken</a>2PressKey(0,message));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f-&gt;ShowModal();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mPlayerRedKeys[i].keyAccel <a href="CppOperatorAssign.htm">=</a> f-&gt;ModalResult;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mControls<a href="CppOperatorEqual.htm">==</a>control4keys)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> String message <a href="CppOperatorAssign.htm">=</a> "Red player #" <a href="CppOperatorPlus.htm">+</a> <a href="CppIntToStr.htm">IntToStr</a>(i+1) <a href="CppOperatorPlus.htm">+</a> ", please press key <b><a href="CppFor.htm">for</a></b> 'Brake'.";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;TForm<a href="GameBoenken.htm">Boenken</a>2PressKey&gt; f(<b><a href="CppNew.htm">new</a></b> TForm<a href="GameBoenken.htm">Boenken</a>2PressKey(0,message));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f-&gt;ShowModal();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mPlayerRedKeys[i].keyBrake <a href="CppOperatorAssign.htm">=</a> f-&gt;ModalResult;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mPlayerRedKeys[i].keyBrake <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mControls<a href="CppOperatorEqual.htm">==</a>control4keys)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> String message <a href="CppOperatorAssign.htm">=</a> "Red player #" <a href="CppOperatorPlus.htm">+</a> <a href="CppIntToStr.htm">IntToStr</a>(i+1) <a href="CppOperatorPlus.htm">+</a> ", please press key <b><a href="CppFor.htm">for</a></b> 'Turn left'.";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;TForm<a href="GameBoenken.htm">Boenken</a>2PressKey&gt; f(<b><a href="CppNew.htm">new</a></b> TForm<a href="GameBoenken.htm">Boenken</a>2PressKey(0,message));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f-&gt;ShowModal();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mPlayerRedKeys[i].keyTurnLeft <a href="CppOperatorAssign.htm">=</a> f-&gt;ModalResult;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mPlayerRedKeys[i].keyTurnLeft <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> String message <a href="CppOperatorAssign.htm">=</a> "Red player #" <a href="CppOperatorPlus.htm">+</a> <a href="CppIntToStr.htm">IntToStr</a>(i+1) <a href="CppOperatorPlus.htm">+</a> ", please press key <b><a href="CppFor.htm">for</a></b> 'Turn right'.";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;TForm<a href="GameBoenken.htm">Boenken</a>2PressKey&gt; f(<b><a href="CppNew.htm">new</a></b> TForm<a href="GameBoenken.htm">Boenken</a>2PressKey(0,message));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f-&gt;ShowModal();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mPlayerRedKeys[i].keyTurnRight <a href="CppOperatorAssign.htm">=</a> f-&gt;ModalResult;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;mPlayerBlueKeys.resize(nBlue);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>nBlue; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> String message <a href="CppOperatorAssign.htm">=</a> "Blue player #" <a href="CppOperatorPlus.htm">+</a> <a href="CppIntToStr.htm">IntToStr</a>(i+1) <a href="CppOperatorPlus.htm">+</a> ", please press key <b><a href="CppFor.htm">for</a></b> 'Accelerate'.";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;TForm<a href="GameBoenken.htm">Boenken</a>2PressKey&gt; f(<b><a href="CppNew.htm">new</a></b> TForm<a href="GameBoenken.htm">Boenken</a>2PressKey(0,message));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f-&gt;ShowModal();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mPlayerBlueKeys[i].keyAccel <a href="CppOperatorAssign.htm">=</a> f-&gt;ModalResult;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mControls<a href="CppOperatorEqual.htm">==</a>control4keys)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> String message <a href="CppOperatorAssign.htm">=</a> "Blue player #" <a href="CppOperatorPlus.htm">+</a> <a href="CppIntToStr.htm">IntToStr</a>(i+1) <a href="CppOperatorPlus.htm">+</a> ", please press key <b><a href="CppFor.htm">for</a></b> 'Brake'.";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;TForm<a href="GameBoenken.htm">Boenken</a>2PressKey&gt; f(<b><a href="CppNew.htm">new</a></b> TForm<a href="GameBoenken.htm">Boenken</a>2PressKey(0,message));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f-&gt;ShowModal();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mPlayerBlueKeys[i].keyBrake <a href="CppOperatorAssign.htm">=</a> f-&gt;ModalResult;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mPlayerBlueKeys[i].keyBrake <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mControls<a href="CppOperatorEqual.htm">==</a>control4keys)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> String message <a href="CppOperatorAssign.htm">=</a> "Blue player #" <a href="CppOperatorPlus.htm">+</a> <a href="CppIntToStr.htm">IntToStr</a>(i+1) <a href="CppOperatorPlus.htm">+</a> ", please press key <b><a href="CppFor.htm">for</a></b> 'Turn left'.";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;TForm<a href="GameBoenken.htm">Boenken</a>2PressKey&gt; f(<b><a href="CppNew.htm">new</a></b> TForm<a href="GameBoenken.htm">Boenken</a>2PressKey(0,message));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f-&gt;ShowModal();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mPlayerBlueKeys[i].keyTurnLeft <a href="CppOperatorAssign.htm">=</a> f-&gt;ModalResult;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mPlayerBlueKeys[i].keyTurnLeft <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> String message <a href="CppOperatorAssign.htm">=</a> "Blue player #" <a href="CppOperatorPlus.htm">+</a> <a href="CppIntToStr.htm">IntToStr</a>(i+1) <a href="CppOperatorPlus.htm">+</a> ", please press key <b><a href="CppFor.htm">for</a></b> 'Turn right'.";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;TForm<a href="GameBoenken.htm">Boenken</a>2PressKey&gt; f(<b><a href="CppNew.htm">new</a></b> TForm<a href="GameBoenken.htm">Boenken</a>2PressKey(0,message));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f-&gt;ShowModal();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mPlayerBlueKeys[i].keyTurnRight <a href="CppOperatorAssign.htm">=</a> f-&gt;ModalResult;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;ButtonStart-&gt;Enabled <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="GameBoenken.htm">Boenken</a>2Menu::Button<a href="CppAbout.htm">About</a>Click(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;TForm<a href="GameBoenken.htm">Boenken</a>2<a href="CppAbout.htm">About</a>&gt; f(<b><a href="CppNew.htm">new</a></b> TForm<a href="GameBoenken.htm">Boenken</a>2<a href="CppAbout.htm">About</a>(0));<br/>
&nbsp;&nbsp;f-&gt;ShowModal();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppDrawGlobe.htm">DrawGlobe</a>Minus(<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> red,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> green,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> blue)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppDrawGlobe.htm">DrawGlobe</a>(image,red,green,blue);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height <a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Height;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Width;<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Pen-&gt;Width <a href="CppOperatorAssign.htm">=</a> height <a href="CppOperatorDivide.htm">/</a> 10;<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Pen-&gt;Color <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;TColor&gt;(RGB(red,green,blue));<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;MoveTo(1 * width <a href="CppOperatorDivide.htm">/</a> 4,height <a href="CppOperatorDivide.htm">/</a> 2);<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;LineTo(3 * width <a href="CppOperatorDivide.htm">/</a> 4,height <a href="CppOperatorDivide.htm">/</a> 2);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppDrawGlobe.htm">DrawGlobe</a>Plus(<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> red,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> green,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> blue)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppDrawGlobe.htm">DrawGlobe</a>(image,red,green,blue);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height <a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Height;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Width;<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Pen-&gt;Width <a href="CppOperatorAssign.htm">=</a> height <a href="CppOperatorDivide.htm">/</a> 10;<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Pen-&gt;Color <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;TColor&gt;(RGB(red,green,blue));<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;MoveTo(1 * width <a href="CppOperatorDivide.htm">/</a> 4,height <a href="CppOperatorDivide.htm">/</a> 2);<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;LineTo(3 * width <a href="CppOperatorDivide.htm">/</a> 4,height <a href="CppOperatorDivide.htm">/</a> 2);<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;MoveTo(width <a href="CppOperatorDivide.htm">/</a> 2,1 * height <a href="CppOperatorDivide.htm">/</a> 4);<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;LineTo(width <a href="CppOperatorDivide.htm">/</a> 2,3 * height <a href="CppOperatorDivide.htm">/</a> 4);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="GameBoenken.htm">Boenken</a>2Menu::ImageNunitsMinusClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nUnits <a href="CppOperatorAssign.htm">=</a> PanelNunits-&gt;Caption.<a href="CppToInt.htm">ToInt</a>();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nUnits <a href="CppOperatorEqual.htm">==</a> 2) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nRed&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> PanelNred-&gt;Caption.<a href="CppToInt.htm">ToInt</a>();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nBlue&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> PanelNblue-&gt;Caption.<a href="CppToInt.htm">ToInt</a>();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nUnits <a href="CppOperatorEqual.htm">==</a> nRed <a href="CppOperatorPlus.htm">+</a> nBlue) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;PanelNunits-&gt;Caption <a href="CppOperatorAssign.htm">=</a> nUnits <a href="CppOperatorMinus.htm">-</a> 1;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="GameBoenken.htm">Boenken</a>2Menu::ImageNunitsPlusClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nUnits <a href="CppOperatorAssign.htm">=</a> PanelNunits-&gt;Caption.<a href="CppToInt.htm">ToInt</a>();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nUnits <a href="CppOperatorEqual.htm">==</a> 20) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;PanelNunits-&gt;Caption <a href="CppOperatorAssign.htm">=</a> nUnits <a href="CppOperatorPlus.htm">+</a> 1;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="GameBoenken.htm">Boenken</a>2Menu::ImageNredMinusClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nRed <a href="CppOperatorAssign.htm">=</a> PanelNred-&gt;Caption.<a href="CppToInt.htm">ToInt</a>();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nRed <a href="CppOperatorEqual.htm">==</a> 1) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;PanelNred-&gt;Caption <a href="CppOperatorAssign.htm">=</a> nRed <a href="CppOperatorMinus.htm">-</a> 1;<br/>
&nbsp;&nbsp;ButtonStart-&gt;Enabled <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="GameBoenken.htm">Boenken</a>2Menu::ImageNredPlusClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nRed&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> PanelNred-&gt;Caption.<a href="CppToInt.htm">ToInt</a>();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nUnits <a href="CppOperatorAssign.htm">=</a> PanelNunits-&gt;Caption.<a href="CppToInt.htm">ToInt</a>();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nBlue&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> PanelNblue-&gt;Caption.<a href="CppToInt.htm">ToInt</a>();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nBlue <a href="CppOperatorPlus.htm">+</a> nRed <a href="CppOperatorEqual.htm">==</a> 20) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;PanelNred-&gt;Caption <a href="CppOperatorAssign.htm">=</a> nRed <a href="CppOperatorPlus.htm">+</a> 1;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nUnits &lt; nRed <a href="CppOperatorPlus.htm">+</a> nBlue <a href="CppOperatorPlus.htm">+</a> 1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> nUnits &lt; 20)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PanelNunits-&gt;Caption <a href="CppOperatorAssign.htm">=</a> nUnits <a href="CppOperatorPlus.htm">+</a> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;ButtonStart-&gt;Enabled <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="GameBoenken.htm">Boenken</a>2Menu::ImageNblueMinusClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nBlue <a href="CppOperatorAssign.htm">=</a> PanelNblue-&gt;Caption.<a href="CppToInt.htm">ToInt</a>();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nBlue <a href="CppOperatorEqual.htm">==</a> 1) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;PanelNblue-&gt;Caption <a href="CppOperatorAssign.htm">=</a> nBlue <a href="CppOperatorMinus.htm">-</a> 1;<br/>
&nbsp;&nbsp;ButtonStart-&gt;Enabled <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="GameBoenken.htm">Boenken</a>2Menu::ImageNbluePlusClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nBlue&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> PanelNblue-&gt;Caption.<a href="CppToInt.htm">ToInt</a>();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nUnits <a href="CppOperatorAssign.htm">=</a> PanelNunits-&gt;Caption.<a href="CppToInt.htm">ToInt</a>();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nRed&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> PanelNred-&gt;Caption.<a href="CppToInt.htm">ToInt</a>();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nBlue <a href="CppOperatorPlus.htm">+</a> nRed <a href="CppOperatorEqual.htm">==</a> 20) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;PanelNblue-&gt;Caption <a href="CppOperatorAssign.htm">=</a> nBlue <a href="CppOperatorPlus.htm">+</a> 1;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nUnits &lt; nRed <a href="CppOperatorPlus.htm">+</a> nBlue <a href="CppOperatorPlus.htm">+</a> 1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> nUnits &lt; 20)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PanelNunits-&gt;Caption <a href="CppOperatorAssign.htm">=</a> nUnits <a href="CppOperatorPlus.htm">+</a> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;ButtonStart-&gt;Enabled <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="GameBoenken.htm">Boenken</a>2Menu::ImageGraphicsOldSchoolClick(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;mGraphics <a href="CppOperatorAssign.htm">=</a> graphicsOldSchool;<br/>
&nbsp;&nbsp;ImageGraphicsChosen-&gt;Picture-&gt;Graphic <a href="CppOperatorAssign.htm">=</a> ImageGraphicsOldSchool-&gt;Picture-&gt;Graphic;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="GameBoenken.htm">Boenken</a>2Menu::ImageGraphicsNewSchoolClick(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;mGraphics <a href="CppOperatorAssign.htm">=</a> graphicsNewSchool;<br/>
&nbsp;&nbsp;ImageGraphicsChosen-&gt;Picture-&gt;Graphic <a href="CppOperatorAssign.htm">=</a> ImageGraphicsNewSchool-&gt;Picture-&gt;Graphic;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="GameBoenken.htm">Boenken</a>2Menu::ImageControlsTwoClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mControls<a href="CppOperatorNotEqual.htm">!=</a>control2keys)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mControls <a href="CppOperatorAssign.htm">=</a> control2keys;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageControlsChosen-&gt;Picture-&gt;Graphic <a href="CppOperatorAssign.htm">=</a> ImageControlsTwo-&gt;Picture-&gt;Graphic;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ButtonStart-&gt;Enabled <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ButtonCalibrate-&gt;Enabled <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="GameBoenken.htm">Boenken</a>2Menu::ImageControlsFourClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mControls<a href="CppOperatorNotEqual.htm">!=</a>control4keys)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mControls <a href="CppOperatorAssign.htm">=</a> control4keys;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageControlsChosen-&gt;Picture-&gt;Graphic <a href="CppOperatorAssign.htm">=</a> ImageControlsFour-&gt;Picture-&gt;Graphic;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ButtonStart-&gt;Enabled <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ButtonCalibrate-&gt;Enabled <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="GameBoenken.htm">Boenken</a>2Menu::TrackBarFrictionChange(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> fraction<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(TrackBarFriction-&gt;Position)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(TrackBarFriction-&gt;Max);<br/>
&nbsp;&nbsp;mFriction <a href="CppOperatorAssign.htm">=</a> 1.0 <a href="CppOperatorMinus.htm">-</a> (fraction * 0.01);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mFriction <a href="CppOperatorEqual.htm">==</a> 1.0) PanelFrictionValue-&gt;Caption <a href="CppOperatorAssign.htm">=</a> "None";<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (mFriction &gt; 0.9966) PanelFrictionValue-&gt;Caption <a href="CppOperatorAssign.htm">=</a> "Low";<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (mFriction &gt; 0.9933) PanelFrictionValue-&gt;Caption <a href="CppOperatorAssign.htm">=</a> "Mid";<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> PanelFrictionValue-&gt;Caption <a href="CppOperatorAssign.htm">=</a> "High";<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenkenVcl/UnitFormBoenken2PressKey.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenkenVcl/UnitFormBoenken2PressKey.h" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="GameBoenken.htm">Boenken</a> 2, a simple game<br/>
&nbsp;&nbsp;Copyright (C) 2007&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitForm<a href="GameBoenken.htm">Boenken</a>2PressKeyH<br/>
<a href="CppDefine.htm">#define</a> UnitForm<a href="GameBoenken.htm">Boenken</a>2PressKeyH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TForm<a href="GameBoenken.htm">Boenken</a>2PressKey : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *Panel1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall FormKeyDown(TObject *Sender, WORD &amp;Key,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TShift<a href="CppState.htm">State</a> Shift);<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TForm<a href="GameBoenken.htm">Boenken</a>2PressKey(T<a href="CppComponent.htm">Component</a>* Owner, <b><a href="CppConst.htm">const</a></b> String&amp; text);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TForm<a href="GameBoenken.htm">Boenken</a>2PressKey *Form<a href="GameBoenken.htm">Boenken</a>2PressKey;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenkenVcl/UnitFormBoenken2PressKey.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenkenVcl/UnitFormBoenken2PressKey.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="GameBoenken.htm">Boenken</a> 2, a simple game<br/>
&nbsp;&nbsp;Copyright (C) 2007&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="GameBoenken.htm">Boenken</a>2PressKey.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TForm<a href="GameBoenken.htm">Boenken</a>2PressKey *Form<a href="GameBoenken.htm">Boenken</a>2PressKey;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TForm<a href="GameBoenken.htm">Boenken</a>2PressKey::TForm<a href="GameBoenken.htm">Boenken</a>2PressKey(<br/>
&nbsp;&nbsp;T<a href="CppComponent.htm">Component</a>* Owner, <b><a href="CppConst.htm">const</a></b> String&amp; text)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: TForm(Owner)<br/>
{<br/>
&nbsp;&nbsp;Caption <a href="CppOperatorAssign.htm">=</a> text;<br/>
&nbsp;&nbsp;Panel1-&gt;Caption <a href="CppOperatorAssign.htm">=</a> text;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="GameBoenken.htm">Boenken</a>2PressKey::FormKeyDown(TObject *Sender,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WORD &amp;Key, TShift<a href="CppState.htm">State</a> Shift)<br/>
{<br/>
&nbsp;&nbsp;ModalResult <a href="CppOperatorAssign.htm">=</a> Key;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenkenVcl/UnitPlayer.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenkenVcl/UnitPlayer.h" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="GameBoenken.htm">Boenken</a> 2, a simple game<br/>
&nbsp;&nbsp;Copyright (C) 2007&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitPlayerH<br/>
<a href="CppDefine.htm">#define</a> UnitPlayerH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;windef.h&gt;<br/>
<b><a href="CppTypedef.htm">typedef</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppShort.htm">short</a></b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WORD;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> Player<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> x;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> y;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> angle;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> speed;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> dx;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> dy;<br/>
&nbsp;&nbsp;WORD keyAccel;<br/>
&nbsp;&nbsp;WORD keyBrake;<br/>
&nbsp;&nbsp;WORD keyTurnLeft;<br/>
&nbsp;&nbsp;WORD keyTurnRight;<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenkenVcl/UnitPlayer.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenkenVcl/UnitPlayer.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="GameBoenken.htm">Boenken</a> 2, a simple game<br/>
&nbsp;&nbsp;Copyright (C) 2007&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitPlayer.h"<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
