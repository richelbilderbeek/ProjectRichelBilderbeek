<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>QtPylos</title>
  <meta name="description" content="C++ QtPylos"/>
  <meta name="keywords" content="C++ QtPylos "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppQtPylos.htm">QtPylos</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.1.663 at Sat Jun 21 23:24:36 2014
 -->
<p><img src="PicQt.png" alt="Qt"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicLubuntu.png" alt="Lubuntu"/></p>
<p>&nbsp;</p>
<p><a href="CppQtPylos.htm">CppQtPylos</a> is a <a href="CppQt.htm">Qt</a>
<a href="CppClass.htm">class</a> for displaying a Pylos game.</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtPylos/CppQtPylos.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtPylos/CppQtPylos.pri" border = "1"><tr><td><code>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtPylos.htm">CppQtPylos</a><br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtPylos.htm">CppQtPylos</a>/<a href="CppQtPylosWidget.htm">qtpyloswidget</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtPylos.htm">CppQtPylos</a>/qt<a href="CppPylos.htm">pylos</a>sprites.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtPylos.htm">CppQtPylos</a>/qt<a href="CppPylos.htm">pylos</a>game<a href="CppWidget.htm">widget</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtPylos.htm">CppQtPylos</a>/qt<a href="CppPylos.htm">pylos</a>board<a href="CppWidget.htm">widget</a>.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtPylos.htm">CppQtPylos</a>/<a href="CppQtPylosWidget.htm">qtpyloswidget</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtPylos.htm">CppQtPylos</a>/qt<a href="CppPylos.htm">pylos</a>sprites.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtPylos.htm">CppQtPylos</a>/qt<a href="CppPylos.htm">pylos</a>game<a href="CppWidget.htm">widget</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtPylos.htm">CppQtPylos</a>/qt<a href="CppPylos.htm">pylos</a>board<a href="CppWidget.htm">widget</a>.h<br/>
<br/>
<a href="CppQmakeOther_files.htm">OTHER_FILES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtPylos.htm">CppQtPylos</a>/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtPylos/qtpylosboardwidget.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtPylos/qtpylosboardwidget.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppPylosWidget.htm">PylosWidget</a>, <a href="CppWidget.htm">widget</a> to display <a href="CppPylos.htm">Pylos</a> <b><a href="CppClass.htm">class</a></b><br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ToolTestPylos.htm">ToolTestPylos</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> QTPYLOSBOARDWIDGET_H<br/>
<a href="CppDefine.htm">#define</a> QTPYLOSBOARDWIDGET_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppTuple.htm">tuple</a>/<a href="CppTuple.htm">tuple</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQWidget.htm">QWidget</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtPylosWidget.htm">qtpyloswidget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppPylos.htm">pylos</a>board.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQPaintEvent.htm">QPaintEvent</a>;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppPylos.htm">pylos</a> {<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppPylosWidget.htm">PylosWidget</a> manages a <a href="CppPylos.htm">pylos</a>::Board and facilitates its user <a href="CppInterface.htm">interface</a><br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>BoardWidget : <b><a href="CppPublic.htm">public</a></b> <a href="CppQt.htm">Qt</a><a href="CppPylosWidget.htm">PylosWidget</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>BoardWidget();<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>BoardWidget(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>BoardWidget&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>BoardWidget&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>BoardWidget&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>BoardWidget() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/CanRemove specifies <b><a href="CppIf.htm">if</a></b> current player can remove one or<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/two marble(s) at the requested position(s).<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> CanRemove(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPylos.htm">pylos</a>::Coordinat&gt;&amp; v) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/CanSet tests <b><a href="CppIf.htm">if</a></b> the current player can be set at the Coordinat<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> CanSet(<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; c) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/CanSetPlayer determines is the active Player can be changed.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/CanSetPlayer <a href="CppReturn.htm">returns</a> <b><a href="CppFalse.htm">false</a></b> <b><a href="CppIf.htm">if</a></b> there are marbles to be removed<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> CanSetPlayer(<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Player player) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/CanTransfer specifies <b><a href="CppIf.htm">if</a></b> current player can transfer<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/the marble at the specified coordinat <b><a href="CppFor.htm">for</a></b> movement<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> CanTransfer(<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; c) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/CanTransfer specifies <b><a href="CppIf.htm">if</a></b> current player can transfer his marble<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/to a <b><a href="CppNew.htm">new</a></b>, higher position<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> CanTransfer(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; to) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get<a href="CppPylos.htm">Pylos</a> <a href="CppReturn.htm">returns</a> a read-only <a href="CppPylos.htm">pylos</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Board * GetBoard() { <b><a href="CppReturn.htm">return</a></b> m_board.get(); }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/GetCurrentTurn <a href="CppReturn.htm">returns</a> whose turn it is now<br/>
&nbsp;&nbsp;<a href="CppPylos.htm">pylos</a>::Player GetCurrentTurn() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/GetLayerSize <a href="CppReturn.htm">returns</a> how many marbles <b><a href="CppThis.htm">this</a></b> is wide/height.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/For exaple; layer 0 has 4x4 marbles, so GetLayerSize<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/will <b><a href="CppReturn.htm">return</a></b> 4.<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetLayerSize(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> layer) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the MustRemove<a href="CppState.htm">State</a> of the <a href="CppWidget.htm">widget</a><br/>
&nbsp;&nbsp;<a href="CppPylos.htm">pylos</a>::MustRemove<a href="CppState.htm">State</a> GetMustRemove() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_must_remove; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the Position<a href="CppState.htm">State</a> at a certain coordinat<br/>
&nbsp;&nbsp;<a href="CppPylos.htm">pylos</a>::Position<a href="CppState.htm">State</a> Get(<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; c) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/GetSelector <a href="CppReturn.htm">returns</a> the selector's current coodinat<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; GetSelector() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_select; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b> its <a href="CppVersion.htm">version</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b> its <a href="CppVersion.htm">version</a> history<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Return the possible winner<br/>
&nbsp;&nbsp;<a href="CppPylos.htm">pylos</a>::Winner GetWinner() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Remove lets the current player remove one or two marbles<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Remove(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPylos.htm">pylos</a>::Coordinat&gt;&amp; v);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set <a href="CppMake.htm">make</a>s current player place his marble<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/at the specified position. After Set,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/GetMustRemove must be called to determine <b><a href="CppIf.htm">if</a></b><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/the current player must remove some marbles<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set(<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; c);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/SetPlayer determines which player is allowed to <a href="CppMake.htm">make</a> a move<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetPlayer(<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Player player);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/StartAdvanced cleans the board to start a game<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/with advanced rules<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> StartAdvanced();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/StartBasic cleans the board to start a game<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/with basic rules<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> StartBasic();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Transfer lets current player tranfer his marble to a <b><a href="CppNew.htm">new</a></b>, higher position<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Transfer(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; to);<br/>
<br/>
<br/>
<b><a href="CppQtSignals.htm">signals</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/PlayerChanged is <a href="CppEmit.htm">emitted</a> when the active player has changed<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PlayerChanged();<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a>Sprites m_sprites;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPylos.htm">pylos</a>::Board&gt; m_board;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/m_must_remove tracks <b><a href="CppIf.htm">if</a></b> the user must remove one/two marbles<br/>
&nbsp;&nbsp;<a href="CppPylos.htm">pylos</a>::MustRemove<a href="CppState.htm">State</a> m_must_remove;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/m_player is the player that is allowed to <b><a href="CppDo.htm">do</a></b> a move<br/>
&nbsp;&nbsp;<a href="CppPylos.htm">pylos</a>::Player m_player;<br/>
<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppPylos.htm">pylos</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPYLOSBOARDWIDGET_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtPylos/qtpylosboardwidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtPylos/qtpylosboardwidget.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppPylosWidget.htm">PylosWidget</a>, <a href="CppWidget.htm">widget</a> to display <a href="CppPylos.htm">Pylos</a> <b><a href="CppClass.htm">class</a></b><br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ToolTestPylos.htm">ToolTestPylos</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="CppPylos.htm">pylos</a>board<a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCstdlibH.htm">cstdlib</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQMouseEvent.htm">QMouseEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPainter.htm">QPainter</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppPylos.htm">pylos</a>board.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppPylos.htm">pylos</a>move.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppPylos.htm">pylos</a>mustremovestate.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppPylos.htm">pylos</a>player.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>BoardWidget::<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>BoardWidget() :<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_board(<b><a href="CppNew.htm">new</a></b> <a href="CppPylos.htm">pylos</a>::BoardBasic),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_must_remove(<a href="CppPylos.htm">pylos</a>::MustRemove<a href="CppState.htm">State</a>::no),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_player(<a href="CppPylos.htm">pylos</a>::Player::player1)<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>BoardWidget::CanRemove(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPylos.htm">pylos</a>::Coordinat&gt;&amp; v) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_board-&gt;CanRemove(v,m_player);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>BoardWidget::CanSet(<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; c) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_board-&gt;CanSet(c,m_player);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>BoardWidget::CanSetPlayer(<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Player) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_must_remove <a href="CppOperatorEqual.htm">==</a> <a href="CppPylos.htm">pylos</a>::MustRemove<a href="CppState.htm">State</a>::no;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>BoardWidget::CanTransfer(<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; c) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_board-&gt;CanTransfer(c,m_player);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>BoardWidget::CanTransfer(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; from,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; to) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_board-&gt;CanTransfer(from,to,m_player);<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::Position<a href="CppState.htm">State</a> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>BoardWidget::Get(<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; c) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_board-&gt;Get(c);<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::Player <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>BoardWidget::GetCurrentTurn() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_player;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>BoardWidget::GetLayerSize(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> layer) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_board-&gt;GetLayerSize(layer);<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>BoardWidget::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "2.0";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>BoardWidget::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;v.push_back("2010-09-22: <a href="CppVersion.htm">version</a> 1.2: initial release <a href="CppVersion.htm">version</a>");<br/>
&nbsp;&nbsp;v.push_back("2010-10-06: <a href="CppVersion.htm">version</a> 1.3: disallow clicking when there is a winner");<br/>
&nbsp;&nbsp;v.push_back("2010-05-28: <a href="CppVersion.htm">version</a> 2.0: inherit from <a href="CppQt.htm">Qt</a><a href="CppPylosWidget.htm">PylosWidget</a>");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::Winner <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>BoardWidget::GetWinner() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_board-&gt;GetWinner();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>BoardWidget::Remove(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPylos.htm">pylos</a>::Coordinat&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;m_board-&gt;Remove(v,m_player);<br/>
&nbsp;&nbsp;m_must_remove <a href="CppOperatorAssign.htm">=</a> <a href="CppPylos.htm">pylos</a>::MustRemove<a href="CppState.htm">State</a>::no;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>BoardWidget::Set(<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; c)<br/>
{<br/>
&nbsp;&nbsp;m_board-&gt;Set(c,m_player,m_must_remove);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>BoardWidget::SetPlayer(<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Player player)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(CanSetPlayer(player));<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_player <a href="CppOperatorNotEqual.htm">!=</a> player)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_player <a href="CppOperatorAssign.htm">=</a> player;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;repaint();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> PlayerChanged();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>BoardWidget::StartAdvanced()<br/>
{<br/>
&nbsp;&nbsp;m_board <a href="CppOperatorAssign.htm">=</a> <a href="CppPylos.htm">pylos</a>::Board::CreateAdvancedBoard();<br/>
&nbsp;&nbsp;m_select <a href="CppOperatorAssign.htm">=</a> <a href="CppPylos.htm">pylos</a>::Coordinat(0,0,0);<br/>
&nbsp;&nbsp;m_other_selectors <a href="CppOperatorAssign.htm">=</a> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPylos.htm">pylos</a>::Coordinat&gt;();<br/>
&nbsp;&nbsp;repaint();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>BoardWidget::StartBasic()<br/>
{<br/>
&nbsp;&nbsp;m_board <a href="CppOperatorAssign.htm">=</a> <a href="CppPylos.htm">pylos</a>::Board::CreateBasicBoard();<br/>
&nbsp;&nbsp;m_select <a href="CppOperatorAssign.htm">=</a> <a href="CppPylos.htm">pylos</a>::Coordinat(0,0,0);<br/>
&nbsp;&nbsp;m_other_selectors <a href="CppOperatorAssign.htm">=</a> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPylos.htm">pylos</a>::Coordinat&gt;();<br/>
&nbsp;&nbsp;repaint();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>BoardWidget::Transfer(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; from,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; to)<br/>
{<br/>
&nbsp;&nbsp;m_board-&gt;Transfer(from,to,m_must_remove);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtPylos/qtpylosgamewidget.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtPylos/qtpylosgamewidget.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppPylosWidget.htm">PylosWidget</a>, <a href="CppWidget.htm">widget</a> to display <a href="CppPylos.htm">Pylos</a> <b><a href="CppClass.htm">class</a></b><br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ToolTestPylos.htm">ToolTestPylos</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> QTPYLOSGAMEWIDGET_H<br/>
<a href="CppDefine.htm">#define</a> QTPYLOSGAMEWIDGET_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppTuple.htm">tuple</a>/<a href="CppTuple.htm">tuple</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQWidget.htm">QWidget</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtPylosWidget.htm">qtpyloswidget</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQPaintEvent.htm">QPaintEvent</a>;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppPylos.htm">pylos</a> {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Game;<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppPylosWidget.htm">PylosWidget</a> manages a <a href="CppPylos.htm">pylos</a>::Game and facilitates its user <a href="CppInterface.htm">interface</a><br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>Game<a href="CppWidget.htm">Widget</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppQt.htm">Qt</a><a href="CppPylosWidget.htm">PylosWidget</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>Game<a href="CppWidget.htm">Widget</a>();<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>Game<a href="CppWidget.htm">Widget</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>Game<a href="CppWidget.htm">Widget</a>&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>Game<a href="CppWidget.htm">Widget</a>&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>Game<a href="CppWidget.htm">Widget</a>&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>Game<a href="CppWidget.htm">Widget</a>() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/CanRemove specifies <b><a href="CppIf.htm">if</a></b> current player can remove one or<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/two marble(s) at the requested position(s).<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> CanRemove(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPylos.htm">pylos</a>::Coordinat&gt;&amp; v) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/CanSet tests <b><a href="CppIf.htm">if</a></b> the current player can be set at the Coordinat<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> CanSet(<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; c) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/CanTransfer specifies <b><a href="CppIf.htm">if</a></b> current player can transfer<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/the marble at the specified coordinat <b><a href="CppFor.htm">for</a></b> movement<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> CanTransfer(<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; c) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/CanTransfer specifies <b><a href="CppIf.htm">if</a></b> current player can transfer his marble<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/to a <b><a href="CppNew.htm">new</a></b>, higher position<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> CanTransfer(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; to) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the Position<a href="CppState.htm">State</a> at a certain coordinat<br/>
&nbsp;&nbsp;<a href="CppPylos.htm">pylos</a>::Position<a href="CppState.htm">State</a> Get(<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; c) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/GetCurrentTurn <a href="CppReturn.htm">returns</a> whose turn it is now<br/>
&nbsp;&nbsp;<a href="CppPylos.htm">pylos</a>::Player GetCurrentTurn() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the MustRemove<a href="CppState.htm">State</a> of the <a href="CppWidget.htm">widget</a><br/>
&nbsp;&nbsp;<a href="CppPylos.htm">pylos</a>::MustRemove<a href="CppState.htm">State</a> GetMustRemove() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get<a href="CppPylos.htm">Pylos</a> <a href="CppReturn.htm">returns</a> a read-only <a href="CppPylos.htm">pylos</a>::Game<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Game * Get<a href="CppPylos.htm">Pylos</a>() { <b><a href="CppReturn.htm">return</a></b> m_<a href="CppPylos.htm">pylos</a>.get(); }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/GetLayerSize <a href="CppReturn.htm">returns</a> how many marbles <b><a href="CppThis.htm">this</a></b> is wide/height.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/For exaple; layer 0 has 4x4 marbles, so GetLayerSize<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/will <b><a href="CppReturn.htm">return</a></b> 4.<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetLayerSize(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> layer) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b> its <a href="CppVersion.htm">version</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b> its <a href="CppVersion.htm">version</a> history<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Return the possible winner<br/>
&nbsp;&nbsp;<a href="CppPylos.htm">pylos</a>::Winner GetWinner() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Remove lets the current player remove one or two marbles<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Remove(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPylos.htm">pylos</a>::Coordinat&gt;&amp; v);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set <a href="CppMake.htm">make</a>s current player place his marble<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/at the specified position. After Set,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/GetMustRemove must be called to determine <b><a href="CppIf.htm">if</a></b><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/the current player must remove some marbles<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set(<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; c);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/StartAdvanced cleans the board to start a game<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/with advanced rules<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> StartAdvanced();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/StartBasic cleans the board to start a game<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/with basic rules<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> StartBasic();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Transfer lets current player tranfer his marble to a <b><a href="CppNew.htm">new</a></b>, higher position<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Transfer(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; to);<br/>
<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The <a href="CppPylos.htm">pylos</a>::Game <b><a href="CppClass.htm">class</a></b> displayed and interacted with<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPylos.htm">pylos</a>::Game&gt; m_<a href="CppPylos.htm">pylos</a>;<br/>
<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppPylos.htm">pylos</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPYLOSGAMEWIDGET_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtPylos/qtpylosgamewidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtPylos/qtpylosgamewidget.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppPylosWidget.htm">PylosWidget</a>, <a href="CppWidget.htm">widget</a> to display <a href="CppPylos.htm">Pylos</a> <b><a href="CppClass.htm">class</a></b><br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ToolTestPylos.htm">ToolTestPylos</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="CppPylos.htm">pylos</a>game<a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCstdlibH.htm">cstdlib</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQMouseEvent.htm">QMouseEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPainter.htm">QPainter</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppPylos.htm">pylos</a>board.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppPylos.htm">pylos</a>game.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppPylos.htm">pylos</a>move.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppPylos.htm">pylos</a>mustremovestate.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppPylos.htm">pylos</a>player.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>Game<a href="CppWidget.htm">Widget</a>::<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>Game<a href="CppWidget.htm">Widget</a>() :<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppPylos.htm">pylos</a>(<a href="CppPylos.htm">pylos</a>::Game::CreateBasicGame())<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>Game<a href="CppWidget.htm">Widget</a>::CanRemove(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPylos.htm">pylos</a>::Coordinat&gt;&amp; v) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_<a href="CppPylos.htm">pylos</a>-&gt;CanRemove(v);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>Game<a href="CppWidget.htm">Widget</a>::CanSet(<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; c) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_<a href="CppPylos.htm">pylos</a>-&gt;CanSet(c);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>Game<a href="CppWidget.htm">Widget</a>::CanTransfer(<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; c) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_<a href="CppPylos.htm">pylos</a>-&gt;CanTransfer(c);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>Game<a href="CppWidget.htm">Widget</a>::CanTransfer(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; from,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; to) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_<a href="CppPylos.htm">pylos</a>-&gt;CanTransfer(from,to);<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::Position<a href="CppState.htm">State</a> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>Game<a href="CppWidget.htm">Widget</a>::Get(<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; c) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_<a href="CppPylos.htm">pylos</a>-&gt;GetBoard()-&gt;Get(c);<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::Player <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>Game<a href="CppWidget.htm">Widget</a>::GetCurrentTurn() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_<a href="CppPylos.htm">pylos</a>-&gt;GetCurrentTurn();<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>Game<a href="CppWidget.htm">Widget</a>::GetLayerSize(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> layer) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_<a href="CppPylos.htm">pylos</a>-&gt;GetBoard()-&gt;GetLayerSize(layer);<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::MustRemove<a href="CppState.htm">State</a> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>Game<a href="CppWidget.htm">Widget</a>::GetMustRemove() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_<a href="CppPylos.htm">pylos</a>-&gt;GetMustRemove();<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>Game<a href="CppWidget.htm">Widget</a>::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "2.0";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>Game<a href="CppWidget.htm">Widget</a>::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;v.push_back("2010-09-22: <a href="CppVersion.htm">version</a> 1.2: initial release <a href="CppVersion.htm">version</a>");<br/>
&nbsp;&nbsp;v.push_back("2010-10-06: <a href="CppVersion.htm">version</a> 1.3: disallow clicking when there is a winner");<br/>
&nbsp;&nbsp;v.push_back("2010-05-28: <a href="CppVersion.htm">version</a> 2.0: inherit from <a href="CppQt.htm">Qt</a><a href="CppPylosWidget.htm">PylosWidget</a>");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::Winner <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>Game<a href="CppWidget.htm">Widget</a>::GetWinner() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_<a href="CppPylos.htm">pylos</a>-&gt;GetWinner();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>Game<a href="CppWidget.htm">Widget</a>::Remove(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPylos.htm">pylos</a>::Coordinat&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;m_<a href="CppPylos.htm">pylos</a>-&gt;Remove(v);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>Game<a href="CppWidget.htm">Widget</a>::Set(<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; c)<br/>
{<br/>
&nbsp;&nbsp;m_<a href="CppPylos.htm">pylos</a>-&gt;Set(c);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>Game<a href="CppWidget.htm">Widget</a>::StartAdvanced()<br/>
{<br/>
&nbsp;&nbsp;m_<a href="CppPylos.htm">pylos</a> <a href="CppOperatorAssign.htm">=</a> <a href="CppPylos.htm">pylos</a>::Game::CreateAdvancedGame();<br/>
&nbsp;&nbsp;m_select <a href="CppOperatorAssign.htm">=</a> <a href="CppPylos.htm">pylos</a>::Coordinat(0,0,0);<br/>
&nbsp;&nbsp;m_other_selectors <a href="CppOperatorAssign.htm">=</a> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPylos.htm">pylos</a>::Coordinat&gt;();<br/>
&nbsp;&nbsp;repaint();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>Game<a href="CppWidget.htm">Widget</a>::StartBasic()<br/>
{<br/>
&nbsp;&nbsp;m_<a href="CppPylos.htm">pylos</a> <a href="CppOperatorAssign.htm">=</a> <a href="CppPylos.htm">pylos</a>::Game::CreateBasicGame();<br/>
&nbsp;&nbsp;m_select <a href="CppOperatorAssign.htm">=</a> <a href="CppPylos.htm">pylos</a>::Coordinat(0,0,0);<br/>
&nbsp;&nbsp;m_other_selectors <a href="CppOperatorAssign.htm">=</a> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPylos.htm">pylos</a>::Coordinat&gt;();<br/>
&nbsp;&nbsp;repaint();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>Game<a href="CppWidget.htm">Widget</a>::Transfer(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; from,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; to)<br/>
{<br/>
&nbsp;&nbsp;m_<a href="CppPylos.htm">pylos</a>-&gt;Transfer(from,to);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtPylos/qtpylossprites.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtPylos/qtpylossprites.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ToolTestPylos.htm">TestPylos</a>, <a href="Tools.htm">tool</a> to test <a href="CppPylos.htm">Pylos</a> <b><a href="CppClass.htm">class</a></b><br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ToolTestPylos.htm">ToolTestPylos</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> QTPYLOSSPRITES_H<br/>
<a href="CppDefine.htm">#define</a> QTPYLOSSPRITES_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppArray.htm">array</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPixmap.htm">QPixmap</a>&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppPylos.htm">pylos</a> {<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostArray.htm">boost::array</a>&lt;<b><a href="CppInt.htm">int</a></b>,6&gt; GetBlackWhiteColors();<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostArray.htm">boost::array</a>&lt;<b><a href="CppInt.htm">int</a></b>,6&gt; GetDefaultColors();<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostArray.htm">boost::array</a>&lt;<b><a href="CppInt.htm">int</a></b>,6&gt; GetRedBlueColors();<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>Sprites<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppEnumClass.htm">enum class</a></b> Type&nbsp;&nbsp;{ player1, player2, player1_select, player2_select, player1_remove, player2_remove, board_bottom, board_hole };<br/>
<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>Sprites(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> board_width <a href="CppOperatorAssign.htm">=</a> 64,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> board_height <a href="CppOperatorAssign.htm">=</a> 64,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostArray.htm">boost::array</a>&lt;<b><a href="CppInt.htm">int</a></b>,6&gt;&amp; colors <a href="CppOperatorAssign.htm">=</a> GetDefaultColors())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: <a href="CppQt.htm">Qt</a>Sprites(board_width,board_height,colors,board_width/4,board_height/4,64) {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get <a href="CppReturn.htm">returns</a> the pixmap of a certain sprite<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPixmap.htm">QPixmap</a>&amp; Get(<b><a href="CppConst.htm">const</a></b> Type sprite) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetBoardWidth() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_board_width; }<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetBoardHeight() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_board_height; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the color scheme<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostArray.htm">boost::array</a>&lt;<b><a href="CppInt.htm">int</a></b>,6&gt;&amp; GetColorScheme() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_colors; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetMarbleWidth() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_board_width <a href="CppOperatorDivide.htm">/</a> 4; }<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetMarbleHeight() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_board_height <a href="CppOperatorDivide.htm">/</a> 4; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b> its <a href="CppVersion.htm">version</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b> its <a href="CppVersion.htm">version</a> history<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/SetBoardSize resizes the sprites to the<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/required sizes<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> SetBoardSize(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> board_width, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> board_height);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/SetColorScheme sets the color scheme of the Sprites.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This redraws all the sprites.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> SetColorScheme(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostArray.htm">boost::array</a>&lt;<b><a href="CppInt.htm">int</a></b>,6&gt; colors);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The implementation of the <b><a href="CppPublic.htm">public</a></b> <a href="CppConstructor.htm">constructor</a><br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>Sprites(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> board_width,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> board_height,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostArray.htm">boost::array</a>&lt;<b><a href="CppInt.htm">int</a></b>,6&gt;&amp; colors,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> square_width,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> square_height,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> greyness_hole<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_board_height;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_board_width;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostArray.htm">boost::array</a>&lt;<b><a href="CppInt.htm">int</a></b>,6&gt; m_colors;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPixmap.htm">QPixmap</a> m_sprite_board_bottom;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPixmap.htm">QPixmap</a> m_sprite_board_hole;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPixmap.htm">QPixmap</a> m_sprite_player1;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPixmap.htm">QPixmap</a> m_sprite_player1_remove;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPixmap.htm">QPixmap</a> m_sprite_player1_select;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPixmap.htm">QPixmap</a> m_sprite_player2;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPixmap.htm">QPixmap</a> m_sprite_player2_remove;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPixmap.htm">QPixmap</a> m_sprite_player2_select;<br/>
};<br/>
<br/>
<a href="CppQPixmap.htm">QPixmap</a> DrawBoardBottom(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> r,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> g,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> b);<br/>
<br/>
<a href="CppComment.htm">///</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppDrawGlobe.htm">DrawGlobe</a>.htm<br/>
<a href="CppQPixmap.htm">QPixmap</a> <a href="CppDrawGlobe.htm">DrawGlobe</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> r,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> g,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> b);<br/>
<br/>
<a href="CppComment.htm">///</a>From http://www.richelbilderbeek.nl/CppDrawInvertedGlobe.htm<br/>
<a href="CppQPixmap.htm">QPixmap</a> DrawInvertedGlobe(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> r,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> g,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> b);<br/>
<br/>
<a href="CppQPixmap.htm">QPixmap</a> DrawRemover(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> r,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> g,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> b);<br/>
<br/>
<a href="CppQPixmap.htm">QPixmap</a> DrawSelector(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> r,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> g,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> b);<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppPaint.htm">Paint</a>.htm<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppPaint.htm">Paint</a>(<br/>
&nbsp;&nbsp;<a href="CppQPixmap.htm">QPixmap</a>&amp; pixmap,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> r,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> g,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> b,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> a <a href="CppOperatorAssign.htm">=</a> 255); <a href="CppComment.htm">//</a>Opaque<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppPylos.htm">pylos</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPYLOSSPRITES_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtPylos/qtpylossprites.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtPylos/qtpylossprites.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ToolTestPylos.htm">TestPylos</a>, <a href="Tools.htm">tool</a> to test <a href="CppPylos.htm">Pylos</a> <b><a href="CppClass.htm">class</a></b><br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ToolTestPylos.htm">ToolTestPylos</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="CppPylos.htm">pylos</a>sprites.h"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQBitmap.htm">QBitmap</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppPylos.htm">pylos</a>move.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a>Sprites::<a href="CppQt.htm">Qt</a>Sprites(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> board_width,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> board_height,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostArray.htm">boost::array</a>&lt;<b><a href="CppInt.htm">int</a></b>,6&gt; &amp;colors,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> square_width,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> square_height,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> greyness_hole<br/>
&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;: m_board_height{board_height},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_board_width{board_width},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_colors(colors),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sprite_board_bottom{DrawBoardBottom(m_board_width,m_board_height,greyness_hole,greyness_hole,greyness_hole)},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sprite_board_hole{DrawInvertedGlobe(square_width,square_height,greyness_hole,greyness_hole,greyness_hole)},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sprite_player1{<a href="CppDrawGlobe.htm">DrawGlobe</a>(square_width,square_height,m_colors[0],m_colors[1],m_colors[2])},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sprite_player1_remove{DrawRemover(square_width,square_height,m_colors[0],m_colors[1],m_colors[2])},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sprite_player1_select{DrawSelector(square_width,square_height,m_colors[0],m_colors[1],m_colors[2])},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sprite_player2{<a href="CppDrawGlobe.htm">DrawGlobe</a>(square_width,square_height,m_colors[3],m_colors[4],m_colors[5])},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sprite_player2_remove{DrawRemover(square_width,square_height,m_colors[3],m_colors[4],m_colors[5])},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sprite_player2_select{DrawSelector(square_width,square_height,m_colors[3],m_colors[4],m_colors[5])}<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppQPixmap.htm">QPixmap</a>&amp; <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a>Sprites::Get(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Type sprite) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (sprite)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Type::player1: <b><a href="CppReturn.htm">return</a></b> m_sprite_player1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Type::player2: <b><a href="CppReturn.htm">return</a></b> m_sprite_player2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Type::player1_select : <b><a href="CppReturn.htm">return</a></b> m_sprite_player1_select;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Type::player2_select : <b><a href="CppReturn.htm">return</a></b> m_sprite_player2_select;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Type::player1_remove : <b><a href="CppReturn.htm">return</a></b> m_sprite_player1_remove;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Type::player2_remove : <b><a href="CppReturn.htm">return</a></b> m_sprite_player2_remove;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Type::board_bottom&nbsp;&nbsp; : <b><a href="CppReturn.htm">return</a></b> m_sprite_board_bottom;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Type::board_hole&nbsp;&nbsp;&nbsp;&nbsp; : <b><a href="CppReturn.htm">return</a></b> m_sprite_board_hole;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a>Sprites::Get");<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a>Sprites::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "2.0";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a>Sprites::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2012-05-28: <a href="CppVersion.htm">version</a> 2.0: initial release <a href="CppVersion.htm">version</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-09-12: <a href="CppVersion.htm">version</a> 2.1: RAII",<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<a href="CppQPixmap.htm">QPixmap</a> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::DrawBoardBottom(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> r,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> g,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> b)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQPixmap.htm">QPixmap</a> pixmap(width,height);<br/>
&nbsp;&nbsp;<a href="CppPaint.htm">Paint</a>(pixmap,r,g,b);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> pixmap;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppDrawGlobe.htm">DrawGlobe</a>.htm<br/>
<a href="CppQPixmap.htm">QPixmap</a> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppDrawGlobe.htm">DrawGlobe</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> r,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> g,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> b)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQPixmap.htm">QPixmap</a> pixmap(width,height);<br/>
&nbsp;&nbsp;<a href="CppQImage.htm">QImage</a> image <a href="CppOperatorAssign.htm">=</a> pixmap.toImage();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image.bytesPerLine() <a href="CppOperatorDivide.htm">/</a> width <a href="CppOperatorEqual.htm">==</a> 4<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume there are 4 bytes per pixel");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> r_max <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(r);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> g_max <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(g);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> b_max <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(b);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> midX <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(width ) <a href="CppOperatorDivide.htm">/</a> 2.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> midY <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(height) <a href="CppOperatorDivide.htm">/</a> 2.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> max_dist <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMin.htm">std::min</a>(midX,midY);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>height; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * <b><a href="CppConst.htm">const</a></b> line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> *&gt;(image.scanLine(y));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y_d <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>width; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x_d <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dist<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdSqrt.htm">std::sqrt</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((x_d <a href="CppOperatorMinus.htm">-</a> midX) * (x_d <a href="CppOperatorMinus.htm">-</a> midX))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> ((y_d <a href="CppOperatorMinus.htm">-</a> midY) * (y_d <a href="CppOperatorMinus.htm">-</a> midY)) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (dist <a href="CppOperatorLessEqual.htm">&lt;=</a> max_dist)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> rel_dist <a href="CppOperatorAssign.htm">=</a> dist <a href="CppOperatorDivide.htm">/</a> max_dist;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> r_here <a href="CppOperatorAssign.htm">=</a> rel_dist * r_max;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> g_here <a href="CppOperatorAssign.htm">=</a> rel_dist * g_max;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> b_here <a href="CppOperatorAssign.htm">=</a> rel_dist * b_max;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( r_here <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( r_here &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( g_here <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( g_here &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( b_here <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( b_here &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+3] <a href="CppOperatorAssign.htm">=</a> 255; <a href="CppComment.htm">//</a>Alpha value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+2] <a href="CppOperatorAssign.htm">=</a> (r_here <a href="CppOperatorEqual.htm">==</a> 0 ? 1: r_here); <a href="CppComment.htm">//</a>Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+1] <a href="CppOperatorAssign.htm">=</a> (g_here <a href="CppOperatorEqual.htm">==</a> 0 ? 1: g_here); <a href="CppComment.htm">//</a>Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+0] <a href="CppOperatorAssign.htm">=</a> (b_here <a href="CppOperatorEqual.htm">==</a> 0 ? 1: b_here); <a href="CppComment.htm">//</a>Blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+3] <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>Alpha value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+2] <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+1] <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+0] <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>Blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;pixmap <a href="CppOperatorAssign.htm">=</a> pixmap.fromImage(image);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> transparency<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQBitmap.htm">QBitmap</a> mask <a href="CppOperatorAssign.htm">=</a> pixmap.createMaskFromColor(<a href="CppQColor.htm">QColor</a>(0,0,0,0).rgb());<br/>
&nbsp;&nbsp;pixmap.setMask(mask);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> pixmap;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>From http://www.richelbilderbeek.nl/CppDrawInvertedGlobe.htm<br/>
<a href="CppQPixmap.htm">QPixmap</a> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::DrawInvertedGlobe(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> r,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> g,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> b)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQPixmap.htm">QPixmap</a> pixmap(width,height);<br/>
&nbsp;&nbsp;<a href="CppQImage.htm">QImage</a> image <a href="CppOperatorAssign.htm">=</a> pixmap.toImage();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image.bytesPerLine() <a href="CppOperatorDivide.htm">/</a> width <a href="CppOperatorEqual.htm">==</a> 4<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume there are 4 bytes per pixel");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> r_max <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(r);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> g_max <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(g);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> b_max <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(b);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> midX <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(width ) <a href="CppOperatorDivide.htm">/</a> 2.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> midY <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(height) <a href="CppOperatorDivide.htm">/</a> 2.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> max_dist <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMin.htm">std::min</a>(midX,midY);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>height; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * <b><a href="CppConst.htm">const</a></b> line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> *&gt;(image.scanLine(y));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y_d <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>width; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x_d <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dist<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdSqrt.htm">std::sqrt</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((x_d <a href="CppOperatorMinus.htm">-</a> midX) * (x_d <a href="CppOperatorMinus.htm">-</a> midX))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> ((y_d <a href="CppOperatorMinus.htm">-</a> midY) * (y_d <a href="CppOperatorMinus.htm">-</a> midY)) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (dist <a href="CppOperatorLessEqual.htm">&lt;=</a> max_dist)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> rel_dist <a href="CppOperatorAssign.htm">=</a> dist <a href="CppOperatorDivide.htm">/</a> max_dist;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> r_here <a href="CppOperatorAssign.htm">=</a> r_max <a href="CppOperatorMinus.htm">-</a> (rel_dist * r_max);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> g_here <a href="CppOperatorAssign.htm">=</a> g_max <a href="CppOperatorMinus.htm">-</a> (rel_dist * g_max);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> b_here <a href="CppOperatorAssign.htm">=</a> b_max <a href="CppOperatorMinus.htm">-</a> (rel_dist * b_max);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( r_here <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( r_here &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( g_here <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( g_here &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( b_here <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( b_here &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+3] <a href="CppOperatorAssign.htm">=</a> 255; <a href="CppComment.htm">//</a>Alpha value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+2] <a href="CppOperatorAssign.htm">=</a> (r_here <a href="CppOperatorEqual.htm">==</a> 0 ? 1: r_here); <a href="CppComment.htm">//</a>Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+1] <a href="CppOperatorAssign.htm">=</a> (g_here <a href="CppOperatorEqual.htm">==</a> 0 ? 1: g_here); <a href="CppComment.htm">//</a>Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+0] <a href="CppOperatorAssign.htm">=</a> (b_here <a href="CppOperatorEqual.htm">==</a> 0 ? 1: b_here); <a href="CppComment.htm">//</a>Blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+3] <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>Alpha value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+2] <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+1] <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+0] <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>Blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;pixmap <a href="CppOperatorAssign.htm">=</a> pixmap.fromImage(image);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> transparency<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQBitmap.htm">QBitmap</a> mask <a href="CppOperatorAssign.htm">=</a> pixmap.createMaskFromColor(<a href="CppQColor.htm">QColor</a>(0,0,0,0).rgb());<br/>
&nbsp;&nbsp;pixmap.setMask(mask);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> pixmap;<br/>
}<br/>
<br/>
<a href="CppQPixmap.htm">QPixmap</a> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::DrawRemover(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> r,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> g,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> b)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Faded out globe<br/>
&nbsp;&nbsp;<a href="CppQPixmap.htm">QPixmap</a> pixmap(width,height);<br/>
&nbsp;&nbsp;<a href="CppQImage.htm">QImage</a> image <a href="CppOperatorAssign.htm">=</a> pixmap.toImage();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image.bytesPerLine() <a href="CppOperatorDivide.htm">/</a> width <a href="CppOperatorEqual.htm">==</a> 4<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume there are 4 bytes per pixel");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> r_max <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(r);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> g_max <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(g);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> b_max <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(b);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> midX <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(width ) <a href="CppOperatorDivide.htm">/</a> 2.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> midY <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(height) <a href="CppOperatorDivide.htm">/</a> 2.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> max_dist <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMin.htm">std::min</a>(midX,midY);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>height; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * <b><a href="CppConst.htm">const</a></b> line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> *&gt;(image.scanLine(y));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y_d <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>width; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x_d <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dist<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdSqrt.htm">std::sqrt</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((x_d <a href="CppOperatorMinus.htm">-</a> midX) * (x_d <a href="CppOperatorMinus.htm">-</a> midX))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> ((y_d <a href="CppOperatorMinus.htm">-</a> midY) * (y_d <a href="CppOperatorMinus.htm">-</a> midY)) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (dist <a href="CppOperatorLessEqual.htm">&lt;=</a> max_dist)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> rel_dist <a href="CppOperatorAssign.htm">=</a> dist <a href="CppOperatorDivide.htm">/</a> max_dist;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> r_here <a href="CppOperatorAssign.htm">=</a> 127 <a href="CppOperatorPlus.htm">+</a> ((rel_dist * r_max) <a href="CppOperatorDivide.htm">/</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> g_here <a href="CppOperatorAssign.htm">=</a> 127 <a href="CppOperatorPlus.htm">+</a> ((rel_dist * g_max) <a href="CppOperatorDivide.htm">/</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> b_here <a href="CppOperatorAssign.htm">=</a> 127 <a href="CppOperatorPlus.htm">+</a> ((rel_dist * b_max) <a href="CppOperatorDivide.htm">/</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( r_here <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( r_here &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( g_here <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( g_here &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( b_here <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( b_here &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+3] <a href="CppOperatorAssign.htm">=</a> 255; <a href="CppComment.htm">//</a>Alpha value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+2] <a href="CppOperatorAssign.htm">=</a> (r_here <a href="CppOperatorEqual.htm">==</a> 0 ? 1: r_here); <a href="CppComment.htm">//</a>Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+1] <a href="CppOperatorAssign.htm">=</a> (g_here <a href="CppOperatorEqual.htm">==</a> 0 ? 1: g_here); <a href="CppComment.htm">//</a>Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+0] <a href="CppOperatorAssign.htm">=</a> (b_here <a href="CppOperatorEqual.htm">==</a> 0 ? 1: b_here); <a href="CppComment.htm">//</a>Blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+3] <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>Alpha value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+2] <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+1] <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+0] <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>Blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;pixmap <a href="CppOperatorAssign.htm">=</a> pixmap.fromImage(image);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> transparency<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQBitmap.htm">QBitmap</a> mask <a href="CppOperatorAssign.htm">=</a> pixmap.createMaskFromColor(<a href="CppQColor.htm">QColor</a>(0,0,0,0).rgb());<br/>
&nbsp;&nbsp;pixmap.setMask(mask);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> pixmap;<br/>
}<br/>
<br/>
<a href="CppQPixmap.htm">QPixmap</a> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::DrawSelector(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> r,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> g,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> b)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQPixmap.htm">QPixmap</a> pixmap(width,height);<br/>
&nbsp;&nbsp;<a href="CppQImage.htm">QImage</a> image <a href="CppOperatorAssign.htm">=</a> pixmap.toImage();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image.bytesPerLine() <a href="CppOperatorDivide.htm">/</a> width <a href="CppOperatorEqual.htm">==</a> 4<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume there are 4 bytes per pixel");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> r_max <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(r);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> g_max <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(g);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> b_max <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(b);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> midX <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(width ) <a href="CppOperatorDivide.htm">/</a> 2.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> midY <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(height) <a href="CppOperatorDivide.htm">/</a> 2.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> max_dist <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMin.htm">std::min</a>(midX,midY);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> min_dist <a href="CppOperatorAssign.htm">=</a> 0.8 * max_dist;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>height; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * <b><a href="CppConst.htm">const</a></b> line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> *&gt;(image.scanLine(y));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y_d <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>width; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x_d <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dist<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdSqrt.htm">std::sqrt</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((x_d <a href="CppOperatorMinus.htm">-</a> midX) * (x_d <a href="CppOperatorMinus.htm">-</a> midX))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> ((y_d <a href="CppOperatorMinus.htm">-</a> midY) * (y_d <a href="CppOperatorMinus.htm">-</a> midY)) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (dist <a href="CppOperatorGreaterEqual.htm">&gt;=</a> min_dist <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> dist <a href="CppOperatorLessEqual.htm">&lt;=</a> max_dist)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> rel_dist <a href="CppOperatorAssign.htm">=</a> (dist <a href="CppOperatorMinus.htm">-</a> min_dist) <a href="CppOperatorDivide.htm">/</a> (max_dist <a href="CppOperatorMinus.htm">-</a> min_dist);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> r_here <a href="CppOperatorAssign.htm">=</a> rel_dist * r_max;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> g_here <a href="CppOperatorAssign.htm">=</a> rel_dist * g_max;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> b_here <a href="CppOperatorAssign.htm">=</a> rel_dist * b_max;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( r_here <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( r_here &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( g_here <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( g_here &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( b_here <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( b_here &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+3] <a href="CppOperatorAssign.htm">=</a> 255; <a href="CppComment.htm">//</a>Alpha value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+2] <a href="CppOperatorAssign.htm">=</a> (r_here <a href="CppOperatorEqual.htm">==</a> 0 ? 1: r_here); <a href="CppComment.htm">//</a>Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+1] <a href="CppOperatorAssign.htm">=</a> (g_here <a href="CppOperatorEqual.htm">==</a> 0 ? 1: g_here); <a href="CppComment.htm">//</a>Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+0] <a href="CppOperatorAssign.htm">=</a> (b_here <a href="CppOperatorEqual.htm">==</a> 0 ? 1: b_here); <a href="CppComment.htm">//</a>Blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+3] <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>Alpha value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+2] <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+1] <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+0] <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>Blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;pixmap <a href="CppOperatorAssign.htm">=</a> pixmap.fromImage(image);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> transparency<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQBitmap.htm">QBitmap</a> mask <a href="CppOperatorAssign.htm">=</a> pixmap.createMaskFromColor(<a href="CppQColor.htm">QColor</a>(0,0,0,0).rgb());<br/>
&nbsp;&nbsp;pixmap.setMask(mask);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> pixmap;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostArray.htm">boost::array</a>&lt;<b><a href="CppInt.htm">int</a></b>,6&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::GetBlackWhiteColors()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostArray.htm">boost::array</a>&lt;<b><a href="CppInt.htm">int</a></b>,6&gt; v;<br/>
&nbsp;&nbsp;v[0] <a href="CppOperatorAssign.htm">=</a> 255; v[1] <a href="CppOperatorAssign.htm">=</a> 255; v[2] <a href="CppOperatorAssign.htm">=</a> 255;<br/>
&nbsp;&nbsp;v[3] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;96; v[4] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;96; v[5] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;96;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostArray.htm">boost::array</a>&lt;<b><a href="CppInt.htm">int</a></b>,6&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::GetDefaultColors()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> GetRedBlueColors();<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostArray.htm">boost::array</a>&lt;<b><a href="CppInt.htm">int</a></b>,6&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::GetRedBlueColors()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostArray.htm">boost::array</a>&lt;<b><a href="CppInt.htm">int</a></b>,6&gt; v;<br/>
&nbsp;&nbsp;v[0] <a href="CppOperatorAssign.htm">=</a> 255; v[1] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp; 0; v[2] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp; 0;<br/>
&nbsp;&nbsp;v[3] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp; 0; v[4] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp; 0; v[5] <a href="CppOperatorAssign.htm">=</a> 255;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppPaint.htm">Paint</a>.htm<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppPaint.htm">Paint</a>(<br/>
&nbsp;&nbsp;<a href="CppQPixmap.htm">QPixmap</a>&amp; pixmap,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> r,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> g,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> b,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> a) <a href="CppComment.htm">//</a>Opaque<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width <a href="CppOperatorAssign.htm">=</a> pixmap.width();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height <a href="CppOperatorAssign.htm">=</a> pixmap.height();<br/>
<br/>
&nbsp;&nbsp;<a href="CppQImage.htm">QImage</a> image <a href="CppOperatorAssign.htm">=</a> pixmap.toImage();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image.bytesPerLine() <a href="CppOperatorDivide.htm">/</a> width <a href="CppOperatorEqual.htm">==</a> 4<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume there are 4 bytes per pixel");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>height; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * <b><a href="CppConst.htm">const</a></b> line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> *&gt;(image.scanLine(y));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>width; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+3] <a href="CppOperatorAssign.htm">=</a> a; <a href="CppComment.htm">//</a>Alpha value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+2] <a href="CppOperatorAssign.htm">=</a> r; <a href="CppComment.htm">//</a>Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+1] <a href="CppOperatorAssign.htm">=</a> g; <a href="CppComment.htm">//</a>Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+0] <a href="CppOperatorAssign.htm">=</a> b; <a href="CppComment.htm">//</a>Blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;pixmap <a href="CppOperatorAssign.htm">=</a> pixmap.fromImage(image);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtPylos/qtpyloswidget.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtPylos/qtpyloswidget.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppPylosWidget.htm">PylosWidget</a>, <a href="CppWidget.htm">widget</a> to display <a href="CppPylos.htm">Pylos</a> <b><a href="CppClass.htm">class</a></b><br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ToolTestPylos.htm">ToolTestPylos</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> QTPYLOSWIDGET_H<br/>
<a href="CppDefine.htm">#define</a> QTPYLOSWIDGET_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppTuple.htm">tuple</a>/<a href="CppTuple.htm">tuple</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQWidget.htm">QWidget</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppPylos.htm">pylos</a>coordinat.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppPylos.htm">pylos</a>fwd.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppPylos.htm">pylos</a>move.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppPylos.htm">pylos</a>winner.h"<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "qt<a href="CppPylos.htm">pylos</a>sprites.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQPaintEvent.htm">QPaintEvent</a>;<br/>
<a href="CppComment.htm">//</a><b><a href="CppNamespace.htm">namespace</a></b> <a href="CppPylos.htm">Pylos</a> { <b><a href="CppStruct.htm">struct</a></b> Game; }<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppPylos.htm">pylos</a> {<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppPylosWidget.htm">PylosWidget</a> is the <a href="CppBaseClass.htm">base class</a> of <a href="CppQt.htm">Qt</a><a href="CppPylos.htm">Pylos</a>BoardWidget and <a href="CppQt.htm">Qt</a><a href="CppPylosWidget.htm">PylosWidget</a><br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a><a href="CppPylosWidget.htm">PylosWidget</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppQWidget.htm">QWidget</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="CppPylosWidget.htm">PylosWidget</a>();<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~<a href="CppQt.htm">Qt</a><a href="CppPylosWidget.htm">PylosWidget</a>() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/mouseMoveEvent is <b><a href="CppPublic.htm">public</a></b>, because<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="ToolTestPylos.htm">TestPylos</a> must be able to <a href="CppMake.htm">make</a> <b><a href="CppVirtual.htm">virtual</a></b> mouse movements.<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> mouseMoveEvent(<a href="CppQMouseEvent.htm">QMouseEvent</a> * e);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/mousePressEvent is <b><a href="CppPublic.htm">public</a></b>, because<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="ToolTestPylos.htm">TestPylos</a> must be able to deliver <b><a href="CppVirtual.htm">virtual</a></b> clicks.<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> mousePressEvent(<a href="CppQMouseEvent.htm">QMouseEvent</a>*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/CanRemove specifies <b><a href="CppIf.htm">if</a></b> current player can remove one or<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/two marble(s) at the requested position(s).<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppBool.htm">bool</a></b> CanRemove(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPylos.htm">pylos</a>::Coordinat&gt;&amp; v) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/CanSet tests <b><a href="CppIf.htm">if</a></b> the current player can be set at the Coordinat<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppBool.htm">bool</a></b> CanSet(<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; c) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/CanTransfer specifies <b><a href="CppIf.htm">if</a></b> current player can transfer<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/the marble at the specified coordinat <b><a href="CppFor.htm">for</a></b> movement<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppBool.htm">bool</a></b> CanTransfer(<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; c) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/CanTransfer specifies <b><a href="CppIf.htm">if</a></b> current player can transfer his marble<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/to a <b><a href="CppNew.htm">new</a></b>, higher position<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppBool.htm">bool</a></b> CanTransfer(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; to) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/GetCurrentTurn <a href="CppReturn.htm">returns</a> whose turn it is now<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppPylos.htm">pylos</a>::Player GetCurrentTurn() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/GetLayerSize <a href="CppReturn.htm">returns</a> how many marbles <b><a href="CppThis.htm">this</a></b> is wide/height.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/For exaple; layer 0 has 4x4 marbles, so GetLayerSize<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/will <b><a href="CppReturn.htm">return</a></b> 4.<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppInt.htm">int</a></b> GetLayerSize(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> layer) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/MustRemove <a href="CppReturn.htm">returns</a> whether the current player<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/must remove one or two marbles<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppPylos.htm">pylos</a>::MustRemove<a href="CppState.htm">State</a> GetMustRemove() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/GetOtherSelectors <a href="CppReturn.htm">returns</a> the other selectors' current coodinats<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPylos.htm">pylos</a>::Coordinat&gt;&amp; GetOtherSelectors() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/GetSelector <a href="CppReturn.htm">returns</a> the selector's current coodinat<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; GetSelector() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_select; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b> its <a href="CppVersion.htm">version</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b> its <a href="CppVersion.htm">version</a> history<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Return the possible winner<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppPylos.htm">pylos</a>::Winner GetWinner() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Remove lets the current player remove one or two marbles<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> Remove(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPylos.htm">pylos</a>::Coordinat&gt;&amp; v) <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set <a href="CppMake.htm">make</a>s current player place his marble<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/at the specified position. After Set,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/GetMustRemove must be called to determine <b><a href="CppIf.htm">if</a></b><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/the current player must remove some marbles<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> Set(<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; c) <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/SetColorSchemeBlackWhite sets the color scheme to black and white.<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetColorSchemeBlackWhite();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/SetColorSchemeRedBlue sets the color scheme to red and blue.<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetColorSchemeRedBlue();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/SetTilt sets the tilt of <b><a href="CppThis.htm">this</a></b> <a href="CppWidget.htm">widget</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetTilt(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> tilt);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/StartAdvanced cleans the board to start a game<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/with advanced rules<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> StartAdvanced() <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/StartBasic cleans the board to start a game<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/with basic rules<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> StartBasic() <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Transfer lets current player tranfer his marble to a <b><a href="CppNew.htm">new</a></b>, higher position<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> Transfer(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; to) <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
<br/>
<b><a href="CppQtSignals.htm">signals</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/HasWinner is <a href="CppEmit.htm">emitted</a> when a winner is found<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> HasWinner();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/SelectorChanged is <a href="CppEmit.htm">emitted</a> when the selector is moved<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SelectorChanged();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/DoneMove is <a href="CppEmit.htm">emitted</a> when a player has done a successfull move<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DoneMove();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Toggle is <a href="CppEmit.htm">emitted</a> when a marble is (de)selected <b><a href="CppFor.htm">for</a></b> something<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Toggle();<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Draw the <a href="CppPylos.htm">Pylos</a> <a href="CppWidget.htm">widget</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> paintEvent(<a href="CppQPaintEvent.htm">QPaintEvent</a> *);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Resize the <a href="CppPylos.htm">Pylos</a> <a href="CppWidget.htm">widget</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> resizeEvent(<a href="CppQResizeEvent.htm">QResizeEvent</a> *);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/m_other_selectors embodies the coordinats <b><a href="CppFor.htm">for</a></b><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppOperatorMinus.htm">-</a> selecting a marble to move to a higher layer<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppOperatorMinus.htm">-</a> select one or two marbles <b><a href="CppFor.htm">for</a></b> removal<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPylos.htm">pylos</a>::Coordinat&gt; m_other_selectors;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The current coordinat of the selector<br/>
&nbsp;&nbsp;<a href="CppPylos.htm">pylos</a>::Coordinat m_select;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/All <a href="CppPylos.htm">Pylos</a> sprites<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>Sprites&gt; m_sprites;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The angle which the board is tilted in radians.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/0.0*<a href="CppM_PI.htm">M_PI</a> denotes looking at the board from the top<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/0.5*<a href="CppM_PI.htm">M_PI</a> denotes looking from directly above the bottom left position<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> m_tilt;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/DeselectRemove remove coordinat c from m_other_selectors,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/because the player deselected the marble at<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/that coordinat<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DeselectRemove(<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; c);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/DrawRemove draws a marble toggled <b><a href="CppFor.htm">for</a></b> removal<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DrawRemove(<a href="CppQPainter.htm">QPainter</a>&amp; painter, <b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; c);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/DrawSelect draws the selector<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DrawSelect(<a href="CppQPainter.htm">QPainter</a>&amp; painter);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the Position<a href="CppState.htm">State</a> at a certain coordinat<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppPylos.htm">pylos</a>::Position<a href="CppState.htm">State</a> Get(<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; c) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain all <a href="CppPylos.htm">pylos</a>::Coordinat <a href="CppInstance.htm">instances</a> at a certain mouse position<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPylos.htm">pylos</a>::Coordinat&gt; GetCoordinats(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> mouse_x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> mouse_y);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/From www.richelbilderbeek.nl/Cpp<a href="CppGetDistance.htm">GetDistance</a>.htm<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppGetDistance.htm">GetDistance</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dx, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dy);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/IsOtherSelector <a href="CppReturn.htm">returns</a> <b><a href="CppIf.htm">if</a></b> the specified coordinat<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/is selected <b><a href="CppFor.htm">for</a></b> removal<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> IsOtherSelector(<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; c) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/MouseLeftClick handles mouse left-clicking.<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> MouseLeftClick();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/MouseLeftClickRemove handles mouse left-clicking<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/during removal state.<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> MouseLeftClickRemove();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/MouseLeftClickSelect handles mouse left-clicking<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/during select state.<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> MouseLeftClickSelect();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/MouseRightClick handles mouse right-clicking.<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> MouseRightClick();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/MouseMove is the first <a href="CppMemberFunction.htm">member function</a> called after a<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/mouse move<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> MouseMove(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/MouseMoveRemoval handles mouse movement<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/when player must remove one or two marbles<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> MouseMoveRemoval(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/MouseMoveSelect handles mouse movement<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/when player must select either a location to<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/place a <b><a href="CppNew.htm">new</a></b> marble or to select a marble to move<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> MouseMoveSelect(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/SaveAllSprites saves all sprites used in <b><a href="CppThis.htm">this</a></b> game.<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SaveAllSprites() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/SetSelector sets the selector coordinat to c<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetSelector(<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; c);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Transform a <a href="CppPylos.htm">pylos</a>::Coordinat to a (x,y) position on the <a href="CppWidget.htm">widget</a>'s canvas<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Note: the (x,y) position denotes the center of the marble<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; Transform(<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; c) <b><a href="CppConst.htm">const</a></b>;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppPylos.htm">pylos</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPYLOSWIDGET_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtPylos/qtpyloswidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtPylos/qtpyloswidget.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppPylosWidget.htm">PylosWidget</a>, <a href="CppWidget.htm">widget</a> to display <a href="CppPylos.htm">Pylos</a> <b><a href="CppClass.htm">class</a></b><br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ToolTestPylos.htm">ToolTestPylos</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtPylosWidget.htm">qtpyloswidget</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCstdlibH.htm">cstdlib</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/math/constants/constants.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQMouseEvent.htm">QMouseEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPainter.htm">QPainter</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppPylos.htm">pylos</a>board.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppPylos.htm">pylos</a>game.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppPylos.htm">pylos</a>move.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppPylos.htm">pylos</a>mustremovestate.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppPylos.htm">pylos</a>player.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="CppPylos.htm">pylos</a>sprites.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylosWidget.htm">PylosWidget</a>::<a href="CppQt.htm">Qt</a><a href="CppPylosWidget.htm">PylosWidget</a>()<br/>
 :&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a>(0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_other_selectors{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_select(0,0,0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sprites(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>Sprites(<b><a href="CppThis.htm">this</a></b>-&gt;width(),<b><a href="CppThis.htm">this</a></b>-&gt;height(),GetRedBlueColors())),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_tilt(30.0 * 2.0 * <a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;() <a href="CppOperatorDivide.htm">/</a> 360.0)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_sprites);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Allows <b><a href="CppThis.htm">this</a></b> <a href="CppWidget.htm">widget</a> to respond to mouse moving over it<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setMouseTracking(<b><a href="CppTrue.htm">true</a></b>);<br/>
<br/>
&nbsp;&nbsp;SetSelector(<a href="CppPylos.htm">pylos</a>::Coordinat(0,0,0));<br/>
<br/>
&nbsp;&nbsp;SaveAllSprites();<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setMinimumWidth(64);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setMinimumHeight(64);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylosWidget.htm">PylosWidget</a>::DeselectRemove(<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; c)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_other_selectors.empty());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_other_selectors.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> 1 <a href="CppOperatorLogicalOr.htm">||</a> sz <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (sz <a href="CppOperatorEqual.htm">==</a> 1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_other_selectors[0] <a href="CppOperatorEqual.htm">==</a> c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_other_selectors.pop_back();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_other_selectors[0] <a href="CppOperatorEqual.htm">==</a> c)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_other_selectors[1] <a href="CppOperatorNotEqual.htm">!=</a> c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdSwap.htm">std::swap</a>(m_other_selectors[0],m_other_selectors[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_other_selectors.back() <a href="CppOperatorEqual.htm">==</a> c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_other_selectors.pop_back();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_other_selectors[1] <a href="CppOperatorEqual.htm">==</a> c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_other_selectors.pop_back();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylosWidget.htm">PylosWidget</a>::DrawRemove(<a href="CppQPainter.htm">QPainter</a>&amp; painter, <b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; c)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a>Sprites::Type sprite <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;( Get(c) <a href="CppOperatorEqual.htm">==</a> <a href="CppPylos.htm">pylos</a>::Position<a href="CppState.htm">State</a>::player1<br/>
&nbsp;&nbsp;&nbsp;&nbsp; ? <a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a>Sprites::Type::player1_remove<br/>
&nbsp;&nbsp;&nbsp;&nbsp; : <a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a>Sprites::Type::player2_remove );<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; p <a href="CppOperatorAssign.htm">=</a> Transform(c);<br/>
&nbsp;&nbsp;painter.drawPixmap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p.first&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> (m_sprites-&gt;GetMarbleWidth()&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> 2),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p.second <a href="CppOperatorMinus.htm">-</a> (m_sprites-&gt;GetMarbleHeight() <a href="CppOperatorDivide.htm">/</a> 2),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sprites-&gt;Get(sprite));<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylosWidget.htm">PylosWidget</a>::DrawSelect(<a href="CppQPainter.htm">QPainter</a>&amp; painter)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (GetWinner() <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppPylos.htm">pylos</a>::Winner::none) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a>Sprites::Type sprite<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (GetCurrentTurn() <a href="CppOperatorEqual.htm">==</a> <a href="CppPylos.htm">pylos</a>::Player::player1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;? <a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a>Sprites::Type::player1_select<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: <a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a>Sprites::Type::player2_select);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; c <a href="CppOperatorAssign.htm">=</a> Transform(m_select);<br/>
&nbsp;&nbsp;painter.drawPixmap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c.first&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> (m_sprites-&gt;GetMarbleWidth()&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> 2),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c.second <a href="CppOperatorMinus.htm">-</a> (m_sprites-&gt;GetMarbleHeight() <a href="CppOperatorDivide.htm">/</a> 2),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sprites-&gt;Get(sprite));<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::Coordinat&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylosWidget.htm">PylosWidget</a>::GetCoordinats(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> mouse_x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> mouse_y)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPylos.htm">pylos</a>::Coordinat&gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppPylos.htm">pylos</a>::GetAllCoordinats();<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; d; <a href="CppComment.htm">//</a>Distances<br/>
&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(v.begin(),v.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(d),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>,mouse_x,mouse_y](<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Calculate <b><a href="CppThis.htm">this</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat its center on the <a href="CppWidget.htm">widget</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; p <a href="CppOperatorAssign.htm">=</a> Transform(c);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppGetDistance.htm">GetDistance</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(p.first&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> mouse_x),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(p.second <a href="CppOperatorMinus.htm">-</a> mouse_y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> d.size());<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPylos.htm">pylos</a>::Coordinat&gt; c;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> v.size();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> ray <a href="CppOperatorAssign.htm">=</a> 0.33 * <a href="CppGetDistance.htm">GetDistance</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(m_sprites-&gt;GetMarbleWidth()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(m_sprites-&gt;GetMarbleHeight()) );<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (d[i] &lt; ray) c.push_back(v[i]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> c;<br/>
}<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylosWidget.htm">PylosWidget</a>::<a href="CppGetDistance.htm">GetDistance</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dx, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dy)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdSqrt.htm">std::sqrt</a>( (dx * dx) <a href="CppOperatorPlus.htm">+</a> (dy * dy) );<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::Coordinat&gt;&amp; <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylosWidget.htm">PylosWidget</a>::GetOtherSelectors() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_other_selectors;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylosWidget.htm">PylosWidget</a>::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.0";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylosWidget.htm">PylosWidget</a>::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;v.push_back("2012-05-28: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>. <a href="CppAdd.htm">Add</a>ed tilt.");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylosWidget.htm">PylosWidget</a>::IsOtherSelector(<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; c) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdFind.htm">std::find</a>(m_other_selectors.begin(),m_other_selectors.end(),c) <a href="CppOperatorNotEqual.htm">!=</a> m_other_selectors.end();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylosWidget.htm">PylosWidget</a>::MouseLeftClick()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!GetMustRemove())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MouseLeftClickSelect();<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;MouseLeftClickRemove();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylosWidget.htm">PylosWidget</a>::MouseLeftClickRemove()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Player tries to select a third marble<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_other_selectors.size() <a href="CppOperatorEqual.htm">==</a> 2)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_select <a href="CppOperatorEqual.htm">==</a> m_other_selectors[0] <a href="CppOperatorLogicalOr.htm">||</a> m_select <a href="CppOperatorEqual.htm">==</a> m_other_selectors[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;DeselectRemove(m_select);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;repaint();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> Toggle();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Toggle marbles selected <b><a href="CppFor.htm">for</a></b> removal<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> must_<b><a href="CppReturn.htm">return</a></b> <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppStdFind.htm">std::find</a>(m_other_selectors.begin(),m_other_selectors.end(),m_select) <a href="CppOperatorNotEqual.htm">!=</a> m_other_selectors.end())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Remove c from m_other_selectors,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>invalidates d<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DeselectRemove(m_select);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> Toggle();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;must_<b><a href="CppReturn.htm">return</a></b> <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (must_<b><a href="CppReturn.htm">return</a></b>) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Player toggles his first marble <b><a href="CppFor.htm">for</a></b> removal<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_other_selectors.empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (CanRemove( <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPylos.htm">pylos</a>::Coordinat&gt;(1,m_select) )) m_other_selectors.push_back(m_select);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;repaint();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> Toggle();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_other_selectors.size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Player clicks a marble and has selected none or one other<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>If the player can remove the selected marble<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>and <b><a href="CppIf.htm">if</a></b> he has not selected two marbles<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> removal already<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (CanRemove( { m_select,m_other_selectors[0] } ))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_other_selectors.push_back(m_select);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;repaint();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> Toggle();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>MouseLeftClickSelect handles mouse left-clicking<br/>
<a href="CppComment.htm">///</a>during select state.<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylosWidget.htm">PylosWidget</a>::MouseLeftClickSelect()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (GetWinner() <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppPylos.htm">pylos</a>::Winner::none) <b><a href="CppReturn.htm">return</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Select marble for movement<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_other_selectors.empty() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> CanTransfer(m_select))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_other_selectors.push_back(m_select);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;repaint();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> Toggle();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Toggle marble selected <b><a href="CppFor.htm">for</a></b> movement<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!m_other_selectors.empty() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_select <a href="CppOperatorEqual.htm">==</a> m_other_selectors[0])<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_other_selectors.pop_back();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;repaint();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> Toggle();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> marbles<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_other_selectors.empty() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> CanSet(m_select))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Set(m_select);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_other_selectors <a href="CppOperatorAssign.htm">=</a> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPylos.htm">pylos</a>::Coordinat&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;repaint();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> DoneMove();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (GetWinner() <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppPylos.htm">pylos</a>::Winner::none)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> HasWinner();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>User might want to move a marble<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (GetMustRemove() <a href="CppOperatorEqual.htm">==</a> <a href="CppPylos.htm">pylos</a>::MustRemove<a href="CppState.htm">State</a>::no)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!m_other_selectors.empty()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> CanTransfer(m_other_selectors[0], m_select) )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Transfer(m_other_selectors[0],m_select);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> DoneMove();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_other_selectors <a href="CppOperatorAssign.htm">=</a> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPylos.htm">pylos</a>::Coordinat&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylosWidget.htm">PylosWidget</a>::MouseMove(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> mouse_x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> mouse_y)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!GetMustRemove())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MouseMoveSelect(mouse_x,mouse_y);<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;MouseMoveRemoval(mouse_x,mouse_y);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylosWidget.htm">PylosWidget</a>::mouseMoveEvent(<a href="CppQMouseEvent.htm">QMouseEvent</a> * e)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(e-&gt;type() <a href="CppOperatorEqual.htm">==</a> <a href="CppQMouseEvent.htm">QMouseEvent</a>::MouseMove);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> mouse_x <a href="CppOperatorAssign.htm">=</a> e-&gt;x();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> mouse_y <a href="CppOperatorAssign.htm">=</a> e-&gt;y();<br/>
&nbsp;&nbsp;MouseMove(mouse_x,mouse_y);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylosWidget.htm">PylosWidget</a>::mousePressEvent(<a href="CppQMouseEvent.htm">QMouseEvent</a>* e)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylosWidget.htm">PylosWidget</a>::mousePressEvent(<a href="CppQMouseEvent.htm">QMouseEvent</a>* e)\n";<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> mouse_x <a href="CppOperatorAssign.htm">=</a> e-&gt;x();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> mouse_y <a href="CppOperatorAssign.htm">=</a> e-&gt;y();<br/>
&nbsp;&nbsp;MouseMove(mouse_x,mouse_y); <a href="CppComment.htm">//</a>Always first perform a mouse move to set the selector right<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (e-&gt;button())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQt.htm">Qt</a>::LeftButton : MouseLeftClick(); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQt.htm">Qt</a>::RightButton: MouseRightClick(); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylosWidget.htm">PylosWidget</a>::MouseMoveRemoval(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> mouse_x,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> mouse_y)<br/>
{<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Selector must be set to removable marbles<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPylos.htm">pylos</a>::Coordinat&gt; v <a href="CppOperatorAssign.htm">=</a> GetCoordinats(mouse_x,mouse_y);<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>](<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>player has selected two marbles <b><a href="CppFor.htm">for</a></b> removal,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>only select those marbles<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(m_other_selectors.size() &gt; 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> IsOtherSelector(c))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>player has selected one marble <b><a href="CppFor.htm">for</a></b> removal,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>select the marble (possibly below it) to be<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>removed as well<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (m_other_selectors.size() <a href="CppOperatorEqual.htm">==</a> 1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> CanRemove( { m_other_selectors[0],c } ))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>player has selected nothing <b><a href="CppFor.htm">for</a></b> removal<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (m_other_selectors.empty() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> CanRemove( <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPylos.htm">pylos</a>::Coordinat&gt;(1,c) ))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SetSelector(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>MouseMoveSelect handles mouse movement<br/>
<a href="CppComment.htm">///</a>when player must select either a location to<br/>
<a href="CppComment.htm">///</a>place a <b><a href="CppNew.htm">new</a></b> marble or to select a marble to move<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylosWidget.htm">PylosWidget</a>::MouseMoveSelect(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> mouse_x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> mouse_y)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Selector must show to either<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> movable marbles<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> spots to place a <b><a href="CppNew.htm">new</a></b> marble<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check lowest <a href="CppPylos.htm">Pylos</a> level first, otherwise (0,0,0) cannot be selected when (1,0,0) can be<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPylos.htm">pylos</a>::Coordinat&gt; v <a href="CppOperatorAssign.htm">=</a> GetCoordinats(mouse_x,mouse_y);<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>](<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>Player selects his/her first position<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ( m_other_selectors.empty()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>Player can set a <b><a href="CppNew.htm">new</a></b> marble there at the current empty position<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (CanSet(c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>Or player can select his/her own marbles <b><a href="CppFor.htm">for</a></b> transfer<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a> CanTransfer(c) ) )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (!m_other_selectors.empty()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (IsOtherSelector(c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a> CanTransfer(m_other_selectors[0],c) ) ) )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SetSelector(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylosWidget.htm">PylosWidget</a>::MouseRightClick()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!GetMustRemove()) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Right mouse button is only used to remove the<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>marbles selected <b><a href="CppFor.htm">for</a></b> removal<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>There must be marbles selected<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_other_selectors.empty()) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Two marbles are selected<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (CanRemove(m_other_selectors))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Remove(m_other_selectors);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> DoneMove();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_other_selectors <a href="CppOperatorAssign.htm">=</a> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPylos.htm">pylos</a>::Coordinat&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;repaint();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylosWidget.htm">PylosWidget</a>::paintEvent(<a href="CppQPaintEvent.htm">QPaintEvent</a> *)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(m_<a href="CppPylos.htm">pylos</a>);<br/>
&nbsp;&nbsp;<a href="CppQPainter.htm">QPainter</a> painter(<b><a href="CppThis.htm">this</a></b>);<br/>
<br/>
&nbsp;&nbsp;painter.drawPixmap(0,0,m_sprites-&gt;Get(<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a>Sprites::Type::board_bottom));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw the hole<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>4; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>4; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;painter.drawPixmap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x * m_sprites-&gt;GetMarbleWidth(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y * m_sprites-&gt;GetMarbleHeight(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_sprites-&gt;Get(<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a>Sprites::Type::board_hole));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> layer=0; layer<a href="CppOperatorNotEqual.htm">!=</a>4; <a href="CppOperatorIncrement.htm">++</a>layer)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> layer_size <a href="CppOperatorAssign.htm">=</a> GetLayerSize(layer);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>layer_size; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>layer_size; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPylos.htm">pylos</a>::Coordinat::IsValid(layer,x,y));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat c(layer,x,y);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw selector, after sprite is drawn<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (c <a href="CppOperatorEqual.htm">==</a> m_select) DrawSelect(painter);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Position<a href="CppState.htm">State</a> state <a href="CppOperatorAssign.htm">=</a> Get(c);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a>Sprites::Type sprite <a href="CppOperatorAssign.htm">=</a> <a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a>Sprites::Type::board_hole;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (state)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppPylos.htm">pylos</a>::Position<a href="CppState.htm">State</a>::empty&nbsp;&nbsp;: <b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppPylos.htm">pylos</a>::Position<a href="CppState.htm">State</a>::player1: sprite <a href="CppOperatorAssign.htm">=</a> <a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a>Sprites::Type::player1; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppPylos.htm">pylos</a>::Position<a href="CppState.htm">State</a>::player2: sprite <a href="CppOperatorAssign.htm">=</a> <a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a>Sprites::Type::player2; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sprite <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a>Sprites::Type::board_hole);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; p <a href="CppOperatorAssign.htm">=</a> Transform(<a href="CppPylos.htm">pylos</a>::Coordinat(layer,x,y));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;painter.drawPixmap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.first&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> (m_sprites-&gt;GetMarbleWidth()&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> 2),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.second <a href="CppOperatorMinus.htm">-</a> (m_sprites-&gt;GetMarbleHeight() <a href="CppOperatorDivide.htm">/</a> 2),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_sprites-&gt;Get(sprite));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw remove<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(m_other_selectors.begin(),m_other_selectors.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>,c,&amp;painter](<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; d)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (d <a href="CppOperatorEqual.htm">==</a> c) DrawRemove(painter,c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw selector, after sprite is drawn<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (c <a href="CppOperatorEqual.htm">==</a> m_select) DrawSelect(painter);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylosWidget.htm">PylosWidget</a>::resizeEvent(<a href="CppQResizeEvent.htm">QResizeEvent</a> *)<br/>
{<br/>
&nbsp;&nbsp;m_sprites.reset(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a>Sprites(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;width(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;height(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_sprites-&gt;GetColorScheme()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;repaint();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylosWidget.htm">PylosWidget</a>::SaveAllSprites() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;m_sprites-&gt;Get(<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a>Sprites::Type::player1).save("sprite_player1.png");<br/>
&nbsp;&nbsp;m_sprites-&gt;Get(<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a>Sprites::Type::player2).save("sprite_player2.png");<br/>
&nbsp;&nbsp;m_sprites-&gt;Get(<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a>Sprites::Type::player1_select).save("sprite_player1_select.png");<br/>
&nbsp;&nbsp;m_sprites-&gt;Get(<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a>Sprites::Type::player2_select).save("sprite_player2_select.png");<br/>
&nbsp;&nbsp;m_sprites-&gt;Get(<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a>Sprites::Type::player1_remove).save("sprite_player1_remove.png");<br/>
&nbsp;&nbsp;m_sprites-&gt;Get(<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a>Sprites::Type::player2_remove).save("sprite_player2_remove.png");<br/>
&nbsp;&nbsp;m_sprites-&gt;Get(<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a>Sprites::Type::board_bottom).save("sprite_board_bottom.png");<br/>
&nbsp;&nbsp;m_sprites-&gt;Get(<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a>Sprites::Type::board_hole).save("sprite_board_hole.png");<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylosWidget.htm">PylosWidget</a>::SetColorSchemeBlackWhite()<br/>
{<br/>
&nbsp;&nbsp;m_sprites.reset(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a>Sprites(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;width(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;height(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPylos.htm">pylos</a>::GetBlackWhiteColors()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;repaint();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylosWidget.htm">PylosWidget</a>::SetColorSchemeRedBlue()<br/>
{<br/>
&nbsp;&nbsp;m_sprites.reset(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a>Sprites(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;width(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;height(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPylos.htm">pylos</a>::GetRedBlueColors()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;repaint();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylosWidget.htm">PylosWidget</a>::SetSelector(<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; c)<br/>
{<br/>
&nbsp;&nbsp;m_select <a href="CppOperatorAssign.htm">=</a> c;<br/>
&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> SelectorChanged();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylosWidget.htm">PylosWidget</a>::SetTilt(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> tilt)<br/>
{<br/>
&nbsp;&nbsp;m_tilt <a href="CppOperatorAssign.htm">=</a> tilt;<br/>
&nbsp;&nbsp;repaint();<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppPylos.htm">pylos</a>::<a href="CppQt.htm">Qt</a><a href="CppPylosWidget.htm">PylosWidget</a>::Transform(<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">pylos</a>::Coordinat&amp; c) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x_co<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (m_sprites-&gt;GetMarbleWidth() <a href="CppOperatorDivide.htm">/</a> 2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppStdSin.htm">std::sin</a>(m_tilt) * <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;((m_sprites-&gt;GetMarbleWidth()) * (c.GetLayer() <a href="CppOperatorPlus.htm">+</a> 0)))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (c.GetX() * m_sprites-&gt;GetMarbleWidth());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y_co<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (m_sprites-&gt;GetMarbleHeight() <a href="CppOperatorDivide.htm">/</a> 2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppStdSin.htm">std::sin</a>(m_tilt) * <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;((m_sprites-&gt;GetMarbleHeight()) * (c.GetLayer() <a href="CppOperatorPlus.htm">+</a> 0)))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (c.GetY() * m_sprites-&gt;GetMarbleHeight());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdMake_pair.htm">std::make_pair</a>(x_co,y_co);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
