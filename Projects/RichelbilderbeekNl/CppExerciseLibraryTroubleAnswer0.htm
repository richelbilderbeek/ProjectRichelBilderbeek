<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Answer of exercise #8: Library trouble #0</title>
  <meta name="description" content="C++ Answer of exercise #8: Library trouble #0"/>
  <meta name="keywords" content="C++ Answer of exercise #8: Library trouble #0"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppExerciseLibraryTroubleAnswer0.htm">Answer of exercise #8: Library trouble #0</a></h1>
<p>&nbsp;</p>
<p>This is the answer of <a href="CppExerciseLibraryTrouble.htm">Exercise #8: library trouble</a>.</p>
<p>&nbsp;</p>
<p>The compiler takes you to the following code:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="fileXT5SrW.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a> search_n. Search <b><a href="CppFor.htm">for</a></b> __count consecutive copies of __val.<br/>
 <br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> _ForwardIter, <b><a href="CppClass.htm">class</a></b> _<a href="CppInt.htm">Integer</a>, <b><a href="CppClass.htm">class</a></b> _Tp&gt;<br/>
&nbsp;&nbsp;_ForwardIter search_n(_ForwardIter __first, _ForwardIter __last,<br/>
&nbsp;&nbsp;_<a href="CppInt.htm">Integer</a> __count, <b><a href="CppConst.htm">const</a></b> _Tp&amp; __val) {<br/>
&nbsp;&nbsp;_<a href="CppStl.htm">STL</a>P_DEBUG_CHECK(__check_range(__first, __last))<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (__count <a href="CppOperatorLessEqual.htm">&lt;=</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> __first;<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;__first <a href="CppOperatorAssign.htm">=</a> find(__first, __last, __val);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (__first <a href="CppOperatorNotEqual.htm">!=</a> __last) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_<a href="CppInt.htm">Integer</a> __n <a href="CppOperatorAssign.htm">=</a> __count <a href="CppOperatorMinus.htm">-</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_ForwardIter __i <a href="CppOperatorAssign.htm">=</a> __first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>+__i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (__i <a href="CppOperatorNotEqual.htm">!=</a> __last <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> __n <a href="CppOperatorNotEqual.htm">!=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> *__i <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> __val) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>+__i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>-__n; <a href="CppComment.htm">//</a> &lt;---<a href="CppOperatorMinus.htm">-</a> THIS LINE<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (__n <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> __first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__first <a href="CppOperatorAssign.htm">=</a> find(__i, __last, __val);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> __last;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>This must means that __n is also a const data type. This is true, as shown below:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="filexHQJFB.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a> search_n. Search <b><a href="CppFor.htm">for</a></b> __count consecutive copies of __val.<br/>
 <br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> _ForwardIter, <b><a href="CppClass.htm">class</a></b> <a href="CppOperatorDivide.htm">/</a>*non-<b><a href="CppConst.htm">const</a></b><a href="CppComment.htm">*/</a> _<a href="CppInt.htm">Integer</a>, <b><a href="CppClass.htm">class</a></b> _Tp&gt;<br/>
&nbsp;&nbsp;_ForwardIter search_n(_ForwardIter __first, _ForwardIter __last,<br/>
&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>*non-<b><a href="CppConst.htm">const</a></b><a href="CppComment.htm">*/</a> _<a href="CppInt.htm">Integer</a> __count, <b><a href="CppConst.htm">const</a></b> _Tp&amp; __val) {<br/>
&nbsp;&nbsp;_<a href="CppStl.htm">STL</a>P_DEBUG_CHECK(__check_range(__first, __last))<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (__count <a href="CppOperatorLessEqual.htm">&lt;=</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> __first;<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;__first <a href="CppOperatorAssign.htm">=</a> find(__first, __last, __val);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (__first <a href="CppOperatorNotEqual.htm">!=</a> __last) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>*non-<b><a href="CppConst.htm">const</a></b><a href="CppComment.htm">*/</a> _<a href="CppInt.htm">Integer</a> __n <a href="CppOperatorAssign.htm">=</a> __count <a href="CppOperatorMinus.htm">-</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_ForwardIter __i <a href="CppOperatorAssign.htm">=</a> __first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>+__i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (__i <a href="CppOperatorNotEqual.htm">!=</a> __last <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> __n <a href="CppOperatorNotEqual.htm">!=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> *__i <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> __val) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>+__i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>-__n; <a href="CppComment.htm">//</a> &lt;---<a href="CppOperatorMinus.htm">-</a> THIS LINE<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (__n <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> __first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__first <a href="CppOperatorAssign.htm">=</a> find(__i, __last, __val);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> __last;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>So, due to the template use, __n will be of type const int, when we pass a __count
of type const int! This conflict with the use of __n as a changing index. The
type of __n should be the non-const type of __count.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>

